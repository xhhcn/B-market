---
// 这里可以添加服务器端逻辑
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>B-Market 管理后台</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    html {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", sans-serif;
      line-height: 1.6;
    }
    
    body {
      background: url('/background.svg') no-repeat center center fixed;
      background-size: cover;
      color: #1a1a1a;
      min-height: 100vh;
      position: relative;
    }
    
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
      z-index: -1;
    }
    
    .admin-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      min-height: 100vh;
      animation: fadeInUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    @keyframes fadeInUp {
      0% {
        opacity: 0;
        transform: translateY(12px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .admin-header {
      background: rgba(255, 255, 255, 0.15);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 20px 24px;
      margin-bottom: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    .admin-header-left {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .admin-header-right {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .back-home-btn {
      color: #6b7280;
      text-decoration: none;
      font-size: 0.875rem;
      font-weight: 500;
      padding: 10px 16px;
      border-radius: 8px;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      background: rgba(107, 114, 128, 0.1);
    }
    
    .back-home-btn:hover {
      color: #374151;
      background: rgba(107, 114, 128, 0.15);
    }
    
    .admin-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1f2937;
    }
    
    .change-password-btn {
      background: #f59e0b;
      color: white;
      border: none;
      padding: 10px 18px;
      border-radius: 8px;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .change-password-btn:hover {
      background: #d97706;
      transform: translateY(-1px);
    }
    
    .add-server-btn {
      background: #10b981;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .add-server-btn:hover {
      background: #059669;
      transform: translateY(-1px);
    }
    
    .servers-list {
      background: rgba(255, 255, 255, 0.15);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 24px 18px 12px 18px;
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    .list-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      padding-bottom: 0;
      border-bottom: none;
    }
    
    .list-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: #1f2937;
      margin: 0;
    }
    
    .list-stats {
      display: flex;
      gap: 16px;
    }
    
    .stats-item {
      font-size: 0.875rem;
      color: #3b82f6;
      background: rgba(255, 255, 255, 0.6);
      padding: 8px 14px;
      border-radius: 8px;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
    }
    
    .stats-item span {
      font-weight: 600;
      color: #2563eb;
    }
    
    /* 服务器列表容器 - 简约风格 */
    .servers-container {
      margin-top: 20px;
    }
    
    /* 强制隐藏原始表格 */
    .table-wrapper,
    .servers-table,
    .servers-table tbody,
    .servers-table tr,
    .servers-table td {
      display: none !important;
      visibility: hidden !important;
      opacity: 0 !important;
    }

    /* 确保新容器显示 */
    .servers-container {
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
    }
    
    /* 空状态提示样式 */
    .empty-state {
      background: rgba(255, 255, 255, 0.15);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 60px 40px;
      text-align: center;
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      margin-top: 20px;
      animation: emptyStateFadeIn 0.5s 0.3s cubic-bezier(0.4, 0, 0.2, 1) both;
    }
    
    .empty-state-content {
      max-width: 400px;
      margin: 0 auto;
    }
    
    .empty-state-icon {
      font-size: 3rem;
      margin-bottom: 20px;
      opacity: 0.7;
    }
    
    .empty-state-title {
      font-size: 1.375rem;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 12px;
    }
    
    .empty-state-description {
      font-size: 0.9375rem;
      color: #6b7280;
      line-height: 1.6;
      margin-bottom: 32px;
    }
    
    .empty-state-btn {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
      border: none;
      border-radius: 10px;
      padding: 14px 28px;
      font-size: 0.9375rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .empty-state-btn:hover {
      background: linear-gradient(135deg, #059669 0%, #047857 100%);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }
    
    @keyframes emptyStateFadeIn {
      0% {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* 列宽控制 */
    .servers-table col:nth-child(1) { width: 8%; }  /* ID */
    .servers-table col:nth-child(2) { width: 15%; } /* 商家 */
    .servers-table col:nth-child(3) { width: 10%; } /* 类型 */
    .servers-table col:nth-child(4) { width: 20%; } /* 配置 */
    .servers-table col:nth-child(5) { width: 12%; } /* 价格 */
    .servers-table col:nth-child(6) { width: 10%; } /* 状态 */
    .servers-table col:nth-child(7) { width: 12%; } /* 到期日期 */
    .servers-table col:nth-child(8) { width: 13%; } /* 操作 */

    
    /* 弹窗样式 - 统一动画系统 */
    .modal {
      display: flex;
      align-items: center;
      justify-content: center;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0);
      backdrop-filter: blur(0px);
      -webkit-backdrop-filter: blur(0px);
      padding: 20px;
      box-sizing: border-box;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .modal.show {
      background: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      opacity: 1;
      visibility: visible;
    }
    
    .modal-content {
      background: #ffffff;
      border-radius: 16px;
      padding: 32px;
      width: 100%;
      max-width: 800px;
      max-height: calc(100vh - 40px);
      overflow-y: auto;
      backdrop-filter: blur(15px);
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
      margin: auto;
      opacity: 0;
      transform: translateY(-12px) scale(0.95);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* 密码修改弹窗特定样式 - 缩小宽度 */
    #changePasswordModal .modal-content {
      max-width: 480px;
    }
    
    /* 密码修改弹窗表单优化 */
    #changePasswordModal .form-grid {
      display: block;
      gap: 16px;
    }
    
    #changePasswordModal .form-group {
      margin-bottom: 20px;
    }
    
    #changePasswordModal .modal-footer {
      margin-top: 24px;
      padding-top: 20px;
    }
    
    /* 移动端密码修改弹窗优化 */
    @media (max-width: 640px) {
      #changePasswordModal .modal-content {
        max-width: calc(100vw - 40px);
        padding: 24px 20px;
      }
      
      #changePasswordModal .form-group {
        margin-bottom: 16px;
      }
      
      #changePasswordModal .modal-footer {
        margin-top: 20px;
        padding-top: 16px;
        flex-direction: column;
        gap: 8px;
      }
      
      #changePasswordModal .btn-cancel,
      #changePasswordModal .btn-submit {
        width: 100%;
      }
    }
    
    /* 隐藏滚动条但保持滚动功能 */
    .modal-content::-webkit-scrollbar {
      display: none;
    }
    
    /* Firefox - 隐藏滚动条 */
    .modal-content {
      scrollbar-width: none;
      -ms-overflow-style: none;
    }
    

    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 32px;
      padding-bottom: 0;
      border-bottom: none;
    }
    
    .modal-title {
      font-size: 1.375rem;
      font-weight: 600;
      color: #1e293b;
    }
    
    .close-btn {
      background: #ffffff;
      border: none;
      font-size: 1.125rem;
      cursor: pointer;
      color: #ef4444;
      padding: 8px;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 8px;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
    }
    
    .close-btn:hover {
      color: #dc2626;
      background: #ffffff;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px 28px;
      margin-bottom: 32px;
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
      position: relative;
      margin-bottom: 4px;
    }
    
    .form-group.full-width {
      grid-column: 1 / -1;
      margin-top: 8px;
    }
    
    /* 双列分割布局 */
    .form-group-split {
      display: flex;
      flex-direction: column;
      position: relative;
      margin-bottom: 4px;
    }
    
    .form-split-container {
      display: flex;
      gap: 12px;
      align-items: flex-end;
    }
    
    .form-split-item {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .form-split-item .form-label {
      font-size: 0.875rem;
      font-weight: 600;
      color: #374151;
      margin-bottom: 10px;
      letter-spacing: 0.025em;
    }
    
    .form-split-item .form-input {
      width: 100%;
      padding: 14px 16px;
      border: 1px solid rgba(229, 231, 235, 0.3);
      border-radius: 10px;
      font-size: 0.875rem;
      font-weight: 500;
      background: #ffffff;
      color: #374151;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .form-split-item .form-input:focus {
      outline: none;
      background: #ffffff;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      border-color: rgba(229, 231, 235, 0.3);
    }
    
    /* 移动端适配 */
    @media (max-width: 640px) {
      .form-split-container {
        flex-direction: column;
        gap: 8px;
        align-items: stretch;
      }
    }
    
    .form-label {
      font-size: 0.875rem;
      font-weight: 600;
      color: #374151;
      margin-bottom: 10px;
      letter-spacing: 0.025em;
    }
    
    .form-input, .form-select, .form-textarea {
      padding: 14px 16px;
      border: 1px solid rgba(229, 231, 235, 0.3);
      border-radius: 10px;
      font-size: 0.875rem;
      font-weight: 500;
      background: #ffffff;
      color: #374151;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
    }
    
    /* 只对非readonly的输入框和select应用过渡效果 */
    .form-input:not([readonly]), .form-select {
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .form-input:focus, .form-select:focus, .form-textarea:focus {
      outline: none;
      background: #ffffff;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      border-color: rgba(229, 231, 235, 0.3);
    }
    
    /* 只读输入框样式 - 高优先级确保从页面加载开始就正确显示 */
    .form-input[readonly] {
      background: rgba(243, 244, 246, 0.8) !important;
      cursor: not-allowed !important;
      color: #6b7280 !important;
      border-color: rgba(229, 231, 235, 0.3) !important;
      transition: none !important;
      backdrop-filter: none !important;
      -webkit-backdrop-filter: none !important;
    }
    
    .form-input[readonly]:focus {
      background: rgba(243, 244, 246, 0.8) !important;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05) !important;
      border-color: rgba(229, 231, 235, 0.3) !important;
      transition: none !important;
      backdrop-filter: none !important;
      -webkit-backdrop-filter: none !important;
    }
    
    /* 专门针对剩余价值和溢价显示输入框的高优先级样式 */
    #remainingValueDisplay.form-input,
    #premiumValueDisplay.form-input {
      background: rgba(243, 244, 246, 0.8) !important;
      cursor: not-allowed !important;
      color: #6b7280 !important;
      border-color: rgba(229, 231, 235, 0.3) !important;
      transition: none !important;
      backdrop-filter: none !important;
      -webkit-backdrop-filter: none !important;
    }
    
    #remainingValueDisplay.form-input:focus,
    #premiumValueDisplay.form-input:focus {
      background: rgba(243, 244, 246, 0.8) !important;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05) !important;
      border-color: rgba(229, 231, 235, 0.3) !important;
      transition: none !important;
      backdrop-filter: none !important;
      -webkit-backdrop-filter: none !important;
    }
    
    /* 计算详情容器样式 - 确保不会有变色问题 */
    .calculation-details {
      background: rgba(248, 250, 252, 0.95) !important;
      border-radius: 10px !important;
      padding: 18px !important;
      backdrop-filter: none !important;
      -webkit-backdrop-filter: none !important;
      border: 1px solid rgba(226, 232, 240, 0.6) !important;
      transition: none !important;
      margin-top: 4px !important;
    }
    

    
    .form-textarea {
      resize: vertical;
      min-height: 110px;
      font-family: inherit;
      line-height: 1.5;
    }
    
    /* 自定义下拉框样式 */
    .custom-select {
      position: relative;
      display: inline-block;
      width: 100%;
    }
    
    .custom-select-trigger {
      padding: 14px 16px;
      border: 1px solid rgba(229, 231, 235, 0.3);
      border-radius: 10px;
      font-size: 0.875rem;
      font-weight: 500;
      background: #ffffff;
      color: #374151;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      box-sizing: border-box;
      min-height: 50px;
    }
    
    .custom-select-trigger:hover {
      background: #ffffff;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }
    
    .custom-select-trigger:focus {
      outline: none;
      background: #ffffff;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      border-color: rgba(229, 231, 235, 0.3);
    }
    
    .custom-select-arrow {
      width: 16px;
      height: 16px;
      transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      color: #6b7280;
      flex-shrink: 0;
      margin-left: 8px;
    }
    
    .custom-select.open .custom-select-arrow {
      transform: rotate(180deg);
      color: #374151;
    }
    
    .custom-select-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: #ffffff;
      border: 1px solid rgba(229, 231, 235, 0.3);
      border-radius: 10px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      max-height: 200px;
      overflow-y: auto;
      margin-top: 4px;
      opacity: 0;
      visibility: hidden;
      transform: translateY(-4px);
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .custom-select.open .custom-select-dropdown {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }
    
    .custom-select-option {
      padding: 12px 16px;
      cursor: pointer;
      transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
      font-size: 0.875rem;
      font-weight: 500;
      color: #374151;
      border-bottom: 1px solid rgba(229, 231, 235, 0.2);
    }
    
    .custom-select-option:last-child {
      border-bottom: none;
    }
    
    .custom-select-option:hover {
      background: rgba(59, 130, 246, 0.05);
      color: #1d4ed8;
    }
    
    .custom-select-option.selected {
      background: rgba(59, 130, 246, 0.1);
      color: #1d4ed8;
      font-weight: 600;
    }
    
    .custom-select-option.selected:hover {
      background: rgba(59, 130, 246, 0.15);
    }
    
    /* 搜索框样式 */
    .custom-select-search {
      padding: 8px 12px;
      border-bottom: 1px solid rgba(229, 231, 235, 0.3);
      background: rgba(248, 250, 252, 0.8);
    }
    
    .custom-select-search-input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid rgba(229, 231, 235, 0.4);
      border-radius: 6px;
      font-size: 0.8125rem;
      font-weight: 500;
      background: #ffffff;
      color: #374151;
      outline: none;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .custom-select-search-input:focus {
      border-color: rgba(59, 130, 246, 0.4);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
    }
    
    .custom-select-search-input::placeholder {
      color: #9ca3af;
      font-style: italic;
    }
    
    /* 选项容器样式 */
    .custom-select-options {
      max-height: 180px;
      overflow-y: auto;
    }
    
    /* 滚动条样式 */
    .custom-select-dropdown::-webkit-scrollbar,
    .custom-select-options::-webkit-scrollbar {
      width: 6px;
    }
    
    .custom-select-dropdown::-webkit-scrollbar-track,
    .custom-select-options::-webkit-scrollbar-track {
      background: rgba(243, 244, 246, 0.5);
      border-radius: 3px;
    }
    
    .custom-select-dropdown::-webkit-scrollbar-thumb,
    .custom-select-options::-webkit-scrollbar-thumb {
      background: rgba(156, 163, 175, 0.5);
      border-radius: 3px;
    }
    
    .custom-select-dropdown::-webkit-scrollbar-thumb:hover,
    .custom-select-options::-webkit-scrollbar-thumb:hover {
      background: rgba(156, 163, 175, 0.7);
    }
    
    /* 确保所有自定义下拉框都有滚动功能 */
    .custom-select-dropdown {
      max-height: 200px;
      overflow-y: auto;
    }
    
    /* 为所有下拉框添加统一的滚动条样式 */
    .custom-select-dropdown::-webkit-scrollbar {
      width: 6px;
    }
    
    .custom-select-dropdown::-webkit-scrollbar-track {
      background: rgba(243, 244, 246, 0.5);
      border-radius: 3px;
    }
    
    .custom-select-dropdown::-webkit-scrollbar-thumb {
      background: rgba(156, 163, 175, 0.5);
      border-radius: 3px;
    }
    
    .custom-select-dropdown::-webkit-scrollbar-thumb:hover {
      background: rgba(156, 163, 175, 0.7);
    }
    
    /* 隐藏所有select元素的默认箭头 */
    select {
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background-image: none !important;
      background: transparent !important;
    }
    
    /* 隐藏IE的默认箭头 */
    select::-ms-expand {
      display: none !important;
    }
    
    /* 针对Webkit浏览器的特殊处理 */
    select::-webkit-appearance {
      -webkit-appearance: none !important;
    }
    
    /* 针对Firefox的特殊处理 */
    select::-moz-appearance {
      -moz-appearance: none !important;
    }
    
    /* 价格输入容器中的select特殊处理 */
    .price-input-container select {
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background-image: none !important;
      background: transparent !important;
      border: none !important;
      outline: none !important;
      cursor: pointer !important;
    }
    
    .price-input-container select::-ms-expand {
      display: none !important;
    }
    
    .price-input-container select::-webkit-appearance {
      -webkit-appearance: none !important;
    }
    
    .price-input-container select::-moz-appearance {
      -moz-appearance: none !important;
    }
    
    /* 隐藏原始form-select元素 */
    .form-select {
      display: none !important;
    }
    
    /* 币种选择器样式 */
    .currency-select-wrapper {
      border-left: 1px solid rgba(229, 231, 235, 0.3);
    }
    
    .currency-select .custom-select-trigger {
      border-radius: 0;
      border: none !important;
      box-shadow: none !important;
      background: transparent !important;
    }
    
    .currency-select .custom-select-trigger:hover {
      background: rgba(249, 250, 251, 0.5) !important;
    }
    
    .currency-select .custom-select-dropdown {
      right: 0;
      left: auto;
      min-width: 120px;
      z-index: 1001;
    }
    
    .currency-select .custom-select-arrow {
      position: absolute;
      right: 8px;
      top: 50%;
      transform: translateY(-50%);
      transition: transform 0.2s ease;
    }
    
    .currency-select.open .custom-select-arrow {
      transform: translateY(-50%) rotate(180deg);
    }
    
    /* 币种下拉框滚动条样式 */
    .currency-select .custom-select-dropdown::-webkit-scrollbar {
      width: 6px;
    }
    
    .currency-select .custom-select-dropdown::-webkit-scrollbar-track {
      background: rgba(243, 244, 246, 0.5);
      border-radius: 3px;
    }
    
    .currency-select .custom-select-dropdown::-webkit-scrollbar-thumb {
      background: rgba(156, 163, 175, 0.5);
      border-radius: 3px;
    }
    
    .currency-select .custom-select-dropdown::-webkit-scrollbar-thumb:hover {
      background: rgba(156, 163, 175, 0.7);
    }
    
    /* 自定义日期选择器容器 */
    .custom-date-picker {
      position: relative;
      display: inline-block;
      width: 100%;
    }
    
    /* 隐藏原生日期输入框 */
    .custom-date-picker input[type="date"] {
      position: absolute;
      opacity: 0;
      pointer-events: none;
      width: 0;
      height: 0;
    }
    
    /* 自定义日期输入框样式 */
    .custom-date-input {
      background: #ffffff;
      border: 1px solid rgba(229, 231, 235, 0.3);
      border-radius: 10px;
      padding: 14px 16px;
      font-size: 0.875rem;
      font-weight: 500;
      color: #374151;
      outline: none;
      transition: all 0.2s ease;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 100%;
      box-sizing: border-box;
      min-height: 50px;
    }
    
    .custom-date-input:hover {
      background: #ffffff;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }
    
    .custom-date-input:focus {
      background: #ffffff;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      border-color: rgba(229, 231, 235, 0.3);
    }
    
    .custom-date-input.disabled {
      background: rgba(156, 163, 175, 0.3);
      cursor: not-allowed;
      color: #6b7280;
      border-color: rgba(229, 231, 235, 0.3);
    }
    
    .custom-date-input .date-text {
      flex: 1;
    }
    
    .custom-date-input .date-text.placeholder {
      color: #9ca3af;
      font-style: italic;
    }
    
    /* 新增的日期输入框样式 */
    .custom-date-input .date-input-field {
      flex: 1;
      border: none;
      outline: none;
      background: transparent;
      color: #374151;
      font-size: 0.875rem;
      font-weight: 500;
      font-family: inherit;
      padding: 0;
      margin: 0;
      width: 100%;
    }
    
    .custom-date-input .date-input-field::placeholder {
      color: #9ca3af;
      font-weight: 400;
    }
    
    .custom-date-input .date-input-field:focus {
      outline: none;
    }
    
    .custom-date-input.disabled .date-input-field {
      color: #9ca3af;
      background: transparent;
      cursor: not-allowed;
      pointer-events: none;
    }
    
    .custom-date-input.disabled .date-input-field::placeholder {
      color: #9ca3af;
    }
    
    .custom-date-input .calendar-icon {
      width: 18px;
      height: 18px;
      opacity: 0.7;
      transition: all 0.2s ease;
      margin-left: 8px;
      flex-shrink: 0;
    }
    
    .custom-date-input:hover .calendar-icon {
      opacity: 1;
      transform: scale(1.02);
    }
    
    /* 自定义日历弹窗样式 */
    .custom-calendar {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: #ffffff;
      border: 1px solid rgba(229, 231, 235, 0.15);
      border-radius: 10px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      z-index: 1000;
      margin-top: 4px;
      opacity: 0;
      visibility: hidden;
      transform: translateY(-4px);
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      overflow: hidden;
    }
    
    .custom-calendar.show {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }
    
    /* 日历头部 */
    .calendar-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 16px 20px;
      background: #ffffff;
      border-bottom: none;
    }
    
    .calendar-nav-btn {
      background: #f8fafc;
      border: none;
      width: 36px;
      height: 36px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      color: #64748b;
    }
    
    .calendar-nav-btn:hover {
      background: #e2e8f0;
      color: #334155;
      transform: scale(1.02);
    }
    
    .calendar-nav-btn:active {
      transform: scale(0.95);
    }
    
    .calendar-nav-btn:disabled {
      opacity: 0.3;
      cursor: not-allowed;
      transform: none;
    }
    
    .calendar-nav-btn:disabled:hover {
      background: #f8fafc;
      transform: none;
    }
    
    .calendar-month-year {
      font-size: 1rem;
      font-weight: 600;
      color: #1e293b;
      min-width: 140px;
      text-align: center;
      letter-spacing: 0.025em;
    }
    
    /* 星期标题 */
    .calendar-weekdays {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      background: #f8fafc;
      border-bottom: none;
    }
    
    .calendar-weekday {
      padding: 14px 8px;
      text-align: center;
      font-size: 0.75rem;
      font-weight: 600;
      color: #64748b;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }
    
    /* 日期网格 */
    .calendar-days {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      background: #ffffff;
      gap: 4px;
      padding: 12px;
    }
    
    /* 超级强制移除所有日历日期按钮的默认样式 */
    .calendar-days button,
    .calendar-days .calendar-day,
    .calendar-days button.calendar-day,
    .calendar-days .calendar-day:focus,
    .calendar-days .calendar-day:active,
    .calendar-days .calendar-day:visited,
    .calendar-days button:focus,
    .calendar-days button:active,
    .calendar-days button:visited {
      background: transparent !important;
      background-color: transparent !important;
      background-image: none !important;
      border: none !important;
      outline: none !important;
      box-shadow: none !important;
      border-radius: 8px !important;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      text-decoration: none !important;
      color: #374151 !important;
      font-weight: 500 !important;
      transition: all 0.2s ease !important;
      -webkit-tap-highlight-color: transparent !important;
      -webkit-touch-callout: none !important;
    }
    
    /* 针对WebKit浏览器的特殊处理 */
    .calendar-day::-webkit-button-inner-text {
      background: transparent !important;
      background-color: transparent !important;
    }
    
    /* 重置按钮的默认样式 - 只影响底部按钮 */
    .custom-calendar .calendar-footer button {
      all: unset !important;
      box-sizing: border-box !important;
    }
    
    /* 强制重置底部按钮的所有默认样式 - 不影响日期按钮 */
    .calendar-footer .calendar-clear-btn,
    .calendar-footer .calendar-today-btn,
    .calendar-footer button.calendar-clear-btn,
    .calendar-footer button.calendar-today-btn,
    .calendar-footer button#clearDate,
    .calendar-footer button#selectToday {
      all: unset !important;
      box-sizing: border-box !important;
      display: block !important;
      text-align: center !important;
      white-space: nowrap !important;
      position: relative !important;
      visibility: visible !important;
      opacity: 1 !important;
    }
    
    /* 超级强制的底部按钮样式 - 确保不被日期按钮样式影响 */
    .calendar-footer [id="clearDate"],
    .calendar-footer button[id="clearDate"],
    button#clearDate {
      background: #f8fafc !important;
      background-color: #f8fafc !important;
      border: none !important;
      color: #6b7280 !important;
      padding: 10px 16px !important;
      border-radius: 8px !important;
      font-size: 0.875rem !important;
      font-weight: 500 !important;
      cursor: pointer !important;
      flex: 1 !important;
      outline: none !important;
      box-shadow: none !important;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      min-height: 40px !important;
      text-align: center !important;
      line-height: 1.4 !important;
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
      width: auto !important;
      height: auto !important;
      aspect-ratio: unset !important;
    }
    
    .calendar-footer [id="selectToday"],
    .calendar-footer button[id="selectToday"],
    button#selectToday {
      background: #3b82f6 !important;
      background-color: #3b82f6 !important;
      border: none !important;
      color: white !important;
      padding: 10px 16px !important;
      border-radius: 8px !important;
      font-size: 0.875rem !important;
      font-weight: 500 !important;
      cursor: pointer !important;
      flex: 1 !important;
      outline: none !important;
      box-shadow: none !important;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      min-height: 40px !important;
      text-align: center !important;
      line-height: 1.4 !important;
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
      width: auto !important;
      height: auto !important;
      aspect-ratio: unset !important;
    }
    
    .calendar-footer [id="clearDate"]:hover,
    .calendar-footer button[id="clearDate"]:hover,
    button#clearDate:hover {
      background: #e2e8f0 !important;
      background-color: #e2e8f0 !important;
      color: #374151 !important;
    }
    
    .calendar-footer [id="selectToday"]:hover,
    .calendar-footer button[id="selectToday"]:hover,
    button#selectToday:hover {
      background: #2563eb !important;
      background-color: #2563eb !important;
    }
    

    
    /* 其他月份的日期 */
    .calendar-days .calendar-day.other-month,
    .calendar-days button.calendar-day.other-month {
      color: #cbd5e1 !important;
      opacity: 0.6 !important;
      background: transparent !important;
      background-color: transparent !important;
      border: none !important;
    }
    
    .calendar-days .calendar-day.other-month:hover,
    .calendar-days button.calendar-day.other-month:hover {
      background: rgba(59, 130, 246, 0.05) !important;
      background-color: rgba(59, 130, 246, 0.05) !important;
      color: #9ca3af !important;
      border: none !important;
    }
    
    /* 选中的日期 */
    .calendar-days .calendar-day.selected,
    .calendar-days button.calendar-day.selected {
      background: #3b82f6 !important;
      background-color: #3b82f6 !important;
      color: white !important;
      font-weight: 600 !important;
      border: none !important;
    }
    
    .calendar-days .calendar-day.selected:hover,
    .calendar-days button.calendar-day.selected:hover {
      background: #2563eb !important;
      background-color: #2563eb !important;
      border: none !important;
    }
    
    /* 今天的日期 - 无边框版本 */
    .calendar-days .calendar-day.today,
    .calendar-days button.calendar-day.today {
      background: transparent !important;
      background-color: transparent !important;
      color: #10b981 !important;
      font-weight: 600 !important;
      border: none !important;
    }
    
    .calendar-days .calendar-day.today:hover,
    .calendar-days button.calendar-day.today:hover {
      background: rgba(16, 185, 129, 0.1) !important;
      background-color: rgba(16, 185, 129, 0.1) !important;
      border: none !important;
    }
    
    /* 今天且选中的日期 */
    .calendar-days .calendar-day.today.selected,
    .calendar-days button.calendar-day.today.selected {
      background: #10b981 !important;
      background-color: #10b981 !important;
      color: white !important;
      border: none !important;
    }
    
    .calendar-days .calendar-day.today.selected:hover,
    .calendar-days button.calendar-day.today.selected:hover {
      background: #059669 !important;
      background-color: #059669 !important;
      border: none !important;
    }
    
    /* 禁用的日期 */
    .calendar-days .calendar-day.disabled,
    .calendar-days button.calendar-day.disabled {
      color: #d1d5db !important;
      cursor: not-allowed !important;
      background: transparent !important;
      background-color: transparent !important;
      opacity: 0.3 !important;
      border: none !important;
    }
    
    .calendar-days .calendar-day.disabled:hover,
    .calendar-days button.calendar-day.disabled:hover {
      background: transparent !important;
      background-color: transparent !important;
      color: #d1d5db !important;
      border: none !important;
    }
    
    /* 终极强制重置 - 覆盖所有浏览器默认样式 */
    button.calendar-day,
    .calendar-days button,
    .calendar-days .calendar-day,
    .calendar-days button.calendar-day,
    .custom-calendar .calendar-days button,
    .custom-calendar .calendar-days .calendar-day,
    [class*="calendar-days"] button,
    [class*="calendar-days"] [class*="calendar-day"],
    button[class*="calendar-day"] {
      all: unset !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      width: 40px !important;
      height: 40px !important;
      min-height: 40px !important;
      aspect-ratio: 1 !important;
      background: transparent !important;
      background-color: transparent !important;
      background-image: none !important;
      border: none !important;
      border-width: 0 !important;
      border-style: none !important;
      outline: none !important;
      box-shadow: none !important;
      -webkit-box-shadow: none !important;
      -moz-box-shadow: none !important;
      border-radius: 8px !important;
      font-family: inherit !important;
      font-size: 0.875rem !important;
      font-weight: 500 !important;
      color: #374151 !important;
      cursor: pointer !important;
      transition: all 0.2s ease !important;
      position: relative !important;
      margin: 0 !important;
      padding: 0 !important;
      text-decoration: none !important;
      user-select: none !important;
      box-sizing: border-box !important;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      -webkit-tap-highlight-color: transparent !important;
      -webkit-touch-callout: none !important;
      line-height: 1 !important;
      vertical-align: baseline !important;
    }
    
    /* 强制悬停效果 */
    button.calendar-day:hover:not(.other-month):not(.selected):not(.today),
    .calendar-days button:hover:not(.other-month):not(.selected):not(.today),
    .calendar-days .calendar-day:hover:not(.other-month):not(.selected):not(.today) {
      background: rgba(59, 130, 246, 0.1) !important;
      background-color: rgba(59, 130, 246, 0.1) !important;
      background-image: none !important;
      color: #1d4ed8 !important;
      border: none !important;
      outline: none !important;
      box-shadow: none !important;
    }
    
    /* 日历底部 */
    .calendar-footer {
      padding: 16px 20px !important;
      background: #ffffff !important;
      border-top: none !important;
      display: flex !important;
      justify-content: space-between !important;
      align-items: center !important;
      gap: 12px !important;
      width: 100% !important;
      box-sizing: border-box !important;
    }
    
    /* 日历底部按钮强制样式 */
    .calendar-footer .calendar-clear-btn,
    .calendar-footer button.calendar-clear-btn,
    .calendar-footer #clearDate,
    button#clearDate {
      background: #f8fafc !important;
      background-color: #f8fafc !important;
      border: none !important;
      color: #6b7280 !important;
      padding: 10px 16px !important;
      border-radius: 8px !important;
      font-size: 0.875rem !important;
      font-weight: 500 !important;
      cursor: pointer !important;
      transition: all 0.2s ease !important;
      flex: 1 !important;
      outline: none !important;
      box-shadow: none !important;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      min-height: 40px !important;
      text-align: center !important;
      line-height: 1.4 !important;
    }
    
    .calendar-footer .calendar-clear-btn:hover,
    .calendar-footer button.calendar-clear-btn:hover,
    .calendar-footer #clearDate:hover,
    button#clearDate:hover {
      background: #e2e8f0 !important;
      background-color: #e2e8f0 !important;
      color: #374151 !important;
    }
    
    .calendar-footer .calendar-today-btn,
    .calendar-footer button.calendar-today-btn,
    .calendar-footer #selectToday,
    button#selectToday {
      background: #3b82f6 !important;
      background-color: #3b82f6 !important;
      border: none !important;
      color: white !important;
      padding: 10px 16px !important;
      border-radius: 8px !important;
      font-size: 0.875rem !important;
      font-weight: 500 !important;
      cursor: pointer !important;
      transition: all 0.2s ease !important;
      flex: 1 !important;
      outline: none !important;
      box-shadow: none !important;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      min-height: 40px !important;
      text-align: center !important;
      line-height: 1.4 !important;
    }
    
    .calendar-footer .calendar-today-btn:hover,
    .calendar-footer button.calendar-today-btn:hover,
    .calendar-footer #selectToday:hover,
    button#selectToday:hover {
      background: #2563eb !important;
      background-color: #2563eb !important;
    }
    
    /* 隐藏数字输入框的上下箭头 */
    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    
    input[type="number"] {
      -moz-appearance: textfield;
    }
    
    /* 自定义价格输入框容器样式 */
    .price-input-container {
      border: 1px solid rgba(229, 231, 235, 0.3);
    }
    
    .price-input-container:focus-within {
      background: #ffffff !important;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05) !important;
      border-color: rgba(229, 231, 235, 0.3);
    }
    
    /* 优化URL输入框样式 */
    .form-input[type="url"] {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='1.8' d='M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1'/%3e%3c/svg%3e");
      background-position: right 14px center;
      background-repeat: no-repeat;
      background-size: 16px;
      padding-right: 40px;
    }
    
    .form-input[type="url"]:focus {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23374151'%3e%3cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='1.8' d='M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1'/%3e%3c/svg%3e");
    }
    

    
    /* 优化placeholder样式 */
    .form-input::placeholder, .form-textarea::placeholder {
      color: #9ca3af;
      font-weight: 400;
      font-style: italic;
    }
    
    .modal-footer {
      display: flex;
      justify-content: flex-end;
      gap: 16px;
      margin-top: 40px;
      padding-top: 0;
      border-top: none;
    }
    
    .btn-cancel, .btn-submit {
      padding: 14px 24px;
      border: none;
      border-radius: 10px;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      letter-spacing: 0.025em;
    }
    
    .btn-cancel {
      background: #ffffff;
      color: #6b7280;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
    }
    
    .btn-cancel:hover {
      background: #ffffff;
      color: #374151;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    
    .btn-submit {
      background: #10b981;
      color: white;
    }
    
    .btn-submit:hover {
      background: #059669;
      box-shadow: 0 1px 3px rgba(16, 185, 129, 0.15);
    }
    
    .loading {
      opacity: 0.7;
      pointer-events: none;
      position: relative;
    }
    
    .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid #e5e7eb;
      border-top: 2px solid #3b82f6;
      border-radius: 50%;
              animation: spin 0.8s cubic-bezier(0.4, 0, 0.2, 1) infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .error-message {
      color: #ef4444;
      font-size: 0.875rem;
      margin-top: 10px;
      padding: 10px 14px;
      background: rgba(254, 242, 242, 0.9);
      border-radius: 8px;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
    }
    
    .success-message {
      color: #059669;
      font-size: 0.875rem;
      margin-top: 10px;
      padding: 10px 14px;
      background: rgba(236, 253, 245, 0.9);
      border-radius: 8px;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
    }
    
    /* 自定义确认框样式 - 统一动画系统 */
    .custom-alert-overlay, .custom-confirm-overlay {
      display: flex;
      align-items: center;
      justify-content: center;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0);
      backdrop-filter: blur(0px);
      -webkit-backdrop-filter: blur(0px);
      z-index: 2000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .custom-alert-overlay.show, .custom-confirm-overlay.show {
      background: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      opacity: 1;
      visibility: visible;
    }
    
    .custom-alert-modal, .custom-confirm-modal {
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 16px;
      padding: 0;
      max-width: 400px;
      width: 90%;
      max-height: 90vh;
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
      overflow: hidden;
      opacity: 0;
      transform: translateY(-12px) scale(0.9);
      transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .custom-alert-content, .custom-confirm-content {
      padding: 32px 28px 24px 28px;
      text-align: center;
    }
    
    .custom-alert-icon, .custom-confirm-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 64px;
      height: 64px;
      margin: 0 auto 20px auto;
      border-radius: 50%;
      background: rgba(59, 130, 246, 0.1);
      color: #3b82f6;
      position: relative;
      overflow: hidden;
      border: none;
      outline: none;
    }
    
    .custom-alert-icon::before, .custom-confirm-icon::before,
    .custom-alert-icon::after, .custom-confirm-icon::after {
      display: none !important;
      content: none !important;
    }
    
    .custom-alert-icon svg, .custom-confirm-icon svg {
      width: 32px !important;
      height: 32px !important;
      display: block !important;
      fill: none !important;
      stroke: currentColor !important;
      stroke-width: 2 !important;
      background: none !important;
      box-shadow: none !important;
      border: none !important;
      outline: none !important;
      position: relative !important;
      z-index: 1 !important;
    }
    
    .custom-alert-icon.success {
      background: rgba(34, 197, 94, 0.1);
      color: #22c55e;
    }
    
    .custom-alert-icon.error {
      background: rgba(239, 68, 68, 0.1);
      color: #ef4444;
    }
    
    .custom-alert-icon.warning {
      background: rgba(245, 158, 11, 0.1);
      color: #f59e0b;
    }
    
    .custom-confirm-icon {
      background: rgba(239, 68, 68, 0.1) !important;
      color: #ef4444 !important;
      box-shadow: none !important;
    }
    
    .custom-alert-message, .custom-confirm-message {
      font-size: 1rem;
      font-weight: 500;
      color: #1f2937;
      line-height: 1.6;
      margin-bottom: 24px;
      word-wrap: break-word;
    }
    
    .custom-alert-buttons, .custom-confirm-buttons {
      display: flex;
      gap: 12px;
      justify-content: center;
    }
    
    .custom-alert-btn, .custom-confirm-btn {
      padding: 12px 24px;
      border: none;
      border-radius: 10px;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      letter-spacing: 0.025em;
      min-width: 80px;
    }
    
    .custom-alert-ok, .custom-confirm-ok {
      background: #3b82f6;
      color: white;
      box-shadow: 0 2px 8px rgba(59, 130, 246, 0.2);
    }
    
    .custom-alert-ok:hover, .custom-confirm-ok:hover {
      background: #2563eb;
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      transform: translateY(-1px);
    }
    
    .custom-confirm-cancel {
      background: rgba(156, 163, 175, 0.1);
      color: #6b7280;
      border: 1px solid rgba(156, 163, 175, 0.3);
    }
    
    .custom-confirm-cancel:hover {
      background: rgba(156, 163, 175, 0.2);
      color: #374151;
      border-color: rgba(156, 163, 175, 0.4);
    }
    

    
    /* 移动端自定义确认框响应式 */
    @media (max-width: 768px) {
      .custom-alert-modal, .custom-confirm-modal {
        width: 95%;
        max-width: 320px;
      }
      
      .custom-alert-content, .custom-confirm-content {
        padding: 28px 24px 20px 24px;
      }
      
      .custom-alert-icon, .custom-confirm-icon {
        width: 56px;
        height: 56px;
        margin-bottom: 16px;
      }
      
      .custom-alert-icon svg, .custom-confirm-icon svg {
        width: 28px;
        height: 28px;
      }
      
      .custom-alert-message, .custom-confirm-message {
        font-size: 0.9375rem;
        margin-bottom: 20px;
      }
      
      .custom-alert-buttons, .custom-confirm-buttons {
        flex-direction: column;
        gap: 8px;
      }
      
      .custom-alert-btn, .custom-confirm-btn {
        width: 100%;
        padding: 14px 20px;
      }
    }

    /* 已售状态详细设置样式 */
    .sold-status-details {
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 12px;
      background-color: #f8fafc;
      width: 100%; /* 确保与状态选择框宽度一致 */
      box-sizing: border-box;
    }
    
    .sold-details-container {
      display: flex;
      gap: 8px; /* 减小间距 */
      width: 100%;
    }
    
    .sold-detail-item {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 4px; /* 减小间距 */
      min-width: 0; /* 防止flex项目溢出 */
    }
    
    .sold-detail-label {
      font-size: 0.75rem;
      font-weight: 600;
      color: #475569;
      margin: 0;
    }
    
    .sold-detail-input {
      padding: 8px 12px;
      border: 1px solid #cbd5e1;
      border-radius: 6px;
      font-size: 0.875rem;
      color: #1e293b;
      background: #ffffff;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      width: 100%;
      box-sizing: border-box;
      min-height: 36px; /* 确保与其他输入框高度一致 */
    }
    
    .sold-detail-input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    /* 已售日期输入框状态样式 */
    .sold-detail-input.error {
      border-color: #ef4444 !important;
      background-color: #fef2f2 !important;
    }
    
    .sold-detail-input.warning {
      border-color: #f59e0b !important;
      background-color: #fffbeb !important;
    }
    
    .sold-detail-input.success {
      border-color: #10b981 !important;
      background-color: #f0fdf4 !important;
    }
    
    .sold-rate-input-container {
      position: relative;
      display: flex;
      align-items: center;
      width: 100%;
    }
    
    .sold-rate-input-container .sold-detail-input {
      padding-right: 50px; /* 为货币单位留出空间 */
      width: 100%;
    }
    
    .sold-rate-currency {
      position: absolute;
      right: 12px;
      font-size: 0.875rem;
      color: #6b7280;
      font-weight: 500;
      pointer-events: none;
    }
    
    /* 响应式设计 */
    @media (max-width: 768px) {
      .admin-container {
        padding: 16px;
      }
      
      .admin-header {
        flex-direction: column;
        gap: 12px;
        text-align: center;
        padding: 16px 12px;
        border-radius: 12px;
      }
      
      .admin-header-left {
        flex-direction: column;
        gap: 16px;
      }
      
      .admin-title {
        font-size: 1.25rem;
      }
      
      .add-server-btn {
        padding: 12px 20px;
        font-size: 0.8125rem;
      }
      
      .servers-list {
        padding: 16px 12px;
        border-radius: 12px;
      }
      
      .form-grid {
        grid-template-columns: 1fr;
        gap: 16px;
        margin-bottom: 24px;
      }
      
      .form-group {
        margin-bottom: 0;
      }
      
      .modal-header {
        margin-bottom: 24px;
        padding-bottom: 0;
        border-bottom: none;
      }
      
      .modal-footer {
        margin-top: 28px;
        padding-top: 0;
        border-top: none;
      }
      
      /* 移动端新布局 */
      .server-row {
        grid-template-columns: 1fr !important;
        gap: 12px !important;
      }
      
      .server-item {
        padding: 20px !important;
      }
      
      /* 移动端列宽调整 */
      .servers-table col:nth-child(1) { width: 10%; }
      .servers-table col:nth-child(2) { width: 15%; }
      .servers-table col:nth-child(3) { width: 12%; }
      .servers-table col:nth-child(4) { width: 20%; }
      .servers-table col:nth-child(5) { width: 18%; }
      .servers-table col:nth-child(6) { width: 10%; }
      .servers-table col:nth-child(7) { width: 15%; }
      .servers-table col:nth-child(8) { width: 0%; }
      
      /* 移动端空状态样式调整 */
      .empty-state {
        padding: 40px 20px;
        border-radius: 12px;
      }
      
      .empty-state-icon {
        font-size: 2.5rem;
        margin-bottom: 16px;
      }
      
      .empty-state-title {
        font-size: 1.25rem;
        margin-bottom: 10px;
      }
      
      .empty-state-description {
        font-size: 0.875rem;
        margin-bottom: 24px;
      }
      
      .empty-state-btn {
        padding: 12px 24px;
        font-size: 0.875rem;
      }
      
      .config-info {
        font-size: 0.7rem;
        line-height: 1.3;
      }
      
      .server-id {
        font-size: 0.7rem;
      }
      
      .merchant-name {
        font-size: 0.8125rem;
      }
      
      .server-type {
        font-size: 0.6875rem;
        padding: 3px 6px;
      }
      
      .price-display {
        font-size: 0.8125rem;
      }
      
              .modal-content {
          width: 100%;
          max-width: 100vw;
          padding: 24px 20px;
          margin: 0;
          border-radius: 16px 16px 0 0;
          max-height: calc(100vh - 20px);
        }
        
        .modal {
          padding: 10px;
          align-items: flex-end;
        }
      
      .modal-footer {
        flex-direction: column-reverse;
        gap: 12px;
      }
      
      .btn-cancel, .btn-submit {
        width: 100%;
        padding: 16px 24px;
        font-size: 0.9375rem;
      }
      
      .list-header {
        flex-direction: column;
        gap: 16px;
        align-items: flex-start;
      }
      
      .list-stats {
        align-self: stretch;
        justify-content: center;
      }
      
      .sold-details-container {
        flex-direction: column;
        gap: 6px;
      }
      
      .sold-status-details {
        padding: 10px;
      }
      
      .sold-detail-input {
        min-height: 40px; /* 移动端稍微增加高度 */
        font-size: 16px; /* 防止iOS缩放 */
      }
    }
    
        @media (max-width: 480px) {
      .admin-container {
        padding: 12px;
      }
      
      .admin-header {
        padding: 20px 16px;
        margin-bottom: 20px;
      }
      
      .admin-title {
        font-size: 1.125rem;
      }
      
      .back-home-btn {
        padding: 10px 14px;
        font-size: 0.8125rem;
      }
      
      .add-server-btn {
        padding: 10px 16px;
        font-size: 0.8125rem;
      }
      
      .servers-list {
        padding: 20px 16px;
      }
      
      /* 小屏幕设备表格优化 */
      .servers-table td {
        padding: 12px 8px;
        font-size: 0.75rem;
      }
      
      .action-buttons {
        flex-direction: column;
        gap: 4px;
      }
      
      .btn-edit, .btn-delete {
        padding: 4px 8px;
        font-size: 0.6875rem;
        min-width: 40px;
      }
      
      .modal-content {
        padding: 20px 16px;
        border-radius: 16px 16px 0 0;
        max-height: calc(100vh - 10px);
      }
      
      .modal-header {
        margin-bottom: 20px;
        padding-bottom: 0;
        border-bottom: none;
      }
      
      .form-grid {
        gap: 14px;
        margin-bottom: 20px;
      }
      
      .modal-footer {
        margin-top: 24px;
        padding-top: 0;
        border-top: none;
      }
      
      /* 移动端自定义日历优化 */
      .custom-calendar {
        left: -10px;
        right: -10px;
        max-width: calc(100vw - 40px);
      }
      
      .calendar-header {
        padding: 12px 16px;
      }
      
      .calendar-month-year {
        font-size: 0.9375rem;
        min-width: 120px;
      }
      
      .calendar-nav-btn {
        width: 32px;
        height: 32px;
      }
      
      .calendar-weekday {
        padding: 10px 4px;
        font-size: 0.6875rem;
      }
      
      .calendar-days {
        gap: 4px;
        padding: 12px;
      }
      
      .calendar-day {
        font-size: 0.8125rem;
        min-height: 36px;
      }
      
      .calendar-footer {
        padding: 12px 16px;
        gap: 10px;
      }
      
      .calendar-footer .custom-calendar .calendar-clear-btn,
      .calendar-footer .custom-calendar .calendar-today-btn,
      .calendar-footer #clearDate,
      .calendar-footer #selectToday {
        padding: 8px 12px !important;
        font-size: 0.8125rem !important;
      }
      
      .form-input, .form-select, .form-textarea {
        padding: 14px 16px;
        font-size: 0.875rem;
      }
      
      .stats-item {
        padding: 8px 12px;
        font-size: 0.8125rem;
      }
      
      /* 超小屏幕日历优化 */
      .custom-calendar {
        left: -5px;
        right: -5px;
        max-width: calc(100vw - 20px);
      }
      
      .calendar-header {
        padding: 10px 12px;
      }
      
      .calendar-month-year {
        font-size: 0.875rem;
        min-width: 100px;
      }
      
      .calendar-nav-btn {
        width: 28px;
        height: 28px;
      }
      
      .calendar-weekday {
        padding: 8px 2px;
        font-size: 0.625rem;
      }
      
      .calendar-days {
        gap: 3px;
        padding: 8px;
      }
      
      .calendar-day {
        font-size: 0.75rem;
        min-height: 32px;
      }
      
      .calendar-footer {
        padding: 12px;
        flex-direction: column;
        gap: 8px;
      }
      
      .calendar-footer .custom-calendar .calendar-clear-btn,
      .calendar-footer .custom-calendar .calendar-today-btn,
      .calendar-footer #clearDate,
      .calendar-footer #selectToday {
        padding: 8px 14px !important;
        font-size: 0.8125rem !important;
        width: 100% !important;
      }
    }
  </style>
  
  <!-- 终极日期按钮样式强制覆盖 -->
  <style>
    /* 最高优先级样式重置 - 必须放在最后 */
    * {
      box-sizing: border-box;
    }
    
    /* 绝对强制的日期按钮样式 */
    .calendar-days button,
    .calendar-days button[type="button"],
    .calendar-day,
    button.calendar-day,
    [data-date] {
      all: unset !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      width: 40px !important;
      height: 40px !important;
      min-height: 40px !important;
      background: transparent !important;
      background-color: transparent !important;
      background-image: none !important;
      border: 0 !important;
      border-width: 0 !important;
      border-style: none !important;
      border-color: transparent !important;
      outline: 0 !important;
      outline-width: 0 !important;
      outline-style: none !important;
      box-shadow: none !important;
      -webkit-box-shadow: none !important;
      -moz-box-shadow: none !important;
      text-shadow: none !important;
      border-radius: 8px !important;
      font-family: inherit !important;
      font-size: 0.875rem !important;
      font-weight: 500 !important;
      color: #374151 !important;
      cursor: pointer !important;
      transition: all 0.2s ease !important;
      position: relative !important;
      margin: 0 !important;
      padding: 0 !important;
      text-decoration: none !important;
      user-select: none !important;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      -webkit-tap-highlight-color: transparent !important;
      -webkit-touch-callout: none !important;
      line-height: 1 !important;
      vertical-align: baseline !important;
      text-align: center !important;
    }
    
    /* 绝对强制的悬停效果 - 所有日期都能悬停 */
    .calendar-days button:hover,
    .calendar-day:hover,
    button.calendar-day:hover,
    [data-date]:hover {
      background: rgba(59, 130, 246, 0.1) !important;
      background-color: rgba(59, 130, 246, 0.1) !important;
      background-image: none !important;
      color: #1d4ed8 !important;
      border: 0 !important;
      outline: 0 !important;
      box-shadow: none !important;
      transform: none !important;
    }
    
    /* 其他月份的悬停效果 */
    .calendar-days button.other-month:hover,
    .calendar-day.other-month:hover {
      background: rgba(59, 130, 246, 0.05) !important;
      background-color: rgba(59, 130, 246, 0.05) !important;
      color: #9ca3af !important;
    }
    
    /* 选中日期的悬停效果 */
    .calendar-days button.selected:hover,
    .calendar-day.selected:hover {
      background: #2563eb !important;
      background-color: #2563eb !important;
      color: white !important;
    }
    
    /* 今天日期的悬停效果 */
    .calendar-days button.today:hover,
    .calendar-day.today:hover {
      background: rgba(16, 185, 129, 0.1) !important;
      background-color: rgba(16, 185, 129, 0.1) !important;
      color: #059669 !important;
    }
    
    /* 今天且选中的悬停效果 */
    .calendar-days button.today.selected:hover,
    .calendar-day.today.selected:hover {
      background: #059669 !important;
      background-color: #059669 !important;
      color: white !important;
    }
    
    /* 确保底部按钮不受影响 */
    .calendar-footer button {
      all: revert !important;
    }
    
    /* 页面淡入动画 */
    .page-wrapper {
      animation: pageContentFadeIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    @keyframes pageContentFadeIn {
      0% {
        opacity: 0;
        transform: translateY(16px);
      }
      40% {
        opacity: 0.6;
        transform: translateY(8px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* 管理页面容器渐现效果 */
    .admin-container {
      animation: adminContainerFadeIn 0.6s 0.1s cubic-bezier(0.4, 0, 0.2, 1) both;
    }
    
    @keyframes adminContainerFadeIn {
      0% {
        opacity: 0;
        transform: translateY(8px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* 头部优先显示动画 */
    .admin-header {
      animation: headerFadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1) both;
    }
    
    @keyframes headerFadeIn {
      0% {
        opacity: 0;
        transform: translateY(-8px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* 服务器列表区域 */
    .servers-list {
      animation: serversListFadeIn 0.5s 0.2s cubic-bezier(0.4, 0, 0.2, 1) both;
    }
    
    @keyframes serversListFadeIn {
      0% {
        opacity: 0;
        transform: translateY(12px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* 服务器项目淡入动画 */
    .server-item {
      animation: serverItemFadeIn 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      opacity: 0;
      transform: translateY(8px);
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    @keyframes serverItemFadeIn {
      0% {
        opacity: 0;
        transform: translateY(8px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .server-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
    }
    
    /* 弹窗状态动画 */
    .modal.show .modal-content {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    
    .modal.closing {
      background: rgba(0, 0, 0, 0) !important;
      backdrop-filter: blur(0px) !important;
      -webkit-backdrop-filter: blur(0px) !important;
      opacity: 0 !important;
      visibility: hidden !important;
    }
    
    .modal.closing .modal-content {
      opacity: 0;
      transform: translateY(-8px) scale(0.98);
    }
    
    /* 自定义日历动画 */
    .custom-calendar {
      opacity: 0;
      transform: translateY(-8px) scale(0.95);
      transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .custom-calendar.show {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    
    /* 按钮和交互元素动画优化 */
    button, .btn, .form-input, .custom-select-trigger {
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    button:hover, .btn:hover {
      transform: translateY(-1px);
    }
    
    button:active, .btn:active {
      transform: translateY(0);
    }
    
    /* 下拉框动画优化 */
    .custom-select-dropdown {
      opacity: 0;
      transform: translateY(-4px);
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .custom-select.open .custom-select-dropdown {
      opacity: 1;
      transform: translateY(0);
    }
    
    /* 确认对话框状态动画 */
    .custom-alert-overlay.show .custom-alert-modal,
    .custom-confirm-overlay.show .custom-confirm-modal {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    
    /* 确认对话框关闭动画 */
    .custom-alert-overlay.closing,
    .custom-confirm-overlay.closing {
      background: rgba(0, 0, 0, 0) !important;
      backdrop-filter: blur(0px) !important;
      -webkit-backdrop-filter: blur(0px) !important;
      opacity: 0 !important;
      visibility: hidden !important;
    }
    
    .custom-alert-overlay.closing .custom-alert-modal,
    .custom-confirm-overlay.closing .custom-confirm-modal {
      opacity: 0;
      transform: translateY(-8px) scale(0.95);
    }
    
    /* 响应式动画优化 */
    @media (prefers-reduced-motion: reduce) {
      *,
      *::before,
      *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }
    }
    
    /* 平滑滚动 */
    html {
      scroll-behavior: smooth;
    }
    
    /* 页面退出动画 */
    body.page-exit {
      opacity: 0;
      transform: translateY(-8px);
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* 修改密码弹窗特定样式 */
    .password-strength-indicator {
      margin-top: 12px;
      padding: 16px;
      background: rgba(243, 244, 246, 0.8);
      border-radius: 10px;
      font-size: 0.8125rem;
      border: 1px solid rgba(209, 213, 219, 0.5);
    }
    
    .strength-item {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 6px;
    }
    
    .strength-item:last-child {
      margin-bottom: 0;
    }
    
    .strength-check {
      width: 18px;
      height: 18px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 11px;
      color: white;
      font-weight: bold;
      background: #ef4444;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .strength-check.valid {
      background: #10b981;
    }
    
    .form-message {
      margin-top: 16px;
      padding: 12px 16px;
      border-radius: 10px;
      font-size: 0.875rem;
      border: 1px solid transparent;
    }
    
    .form-message.success {
      background: rgba(34, 197, 94, 0.1);
      color: #059669;
      border-color: rgba(34, 197, 94, 0.2);
    }
    
    .form-message.error {
      background: rgba(239, 68, 68, 0.1);
      color: #dc2626;
      border-color: rgba(239, 68, 68, 0.2);
    }
    
    .btn-loading {
      display: inline-block;
    }
    
    .spinner {
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-top: 2px solid white;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="page-wrapper">
    <div class="admin-container">
    <!-- 头部 -->
    <div class="admin-header">
      <div class="admin-header-left">
        <a href="/" class="back-home-btn">← 返回首页</a>
      </div>
      <div class="admin-header-right">
        <button class="change-password-btn" onclick="openChangePasswordModal()">
          🔑 修改密码
        </button>
        <button class="add-server-btn" onclick="openAddModal()">
          + 添加服务器
        </button>
      </div>
    </div>
    
    <!-- 服务器列表 -->
    <div class="servers-list">
      <div class="table-wrapper">
        <table class="servers-table" id="serversTable">
          <colgroup>
            <col>
            <col>
            <col>
            <col>
            <col>
            <col>
            <col>
            <col>
          </colgroup>
          <tbody id="serversTableBody">
            <!-- 数据将通过JavaScript动态加载 -->
          </tbody>
        </table>
      </div>
      
      <!-- 新的服务器列表容器 -->
      <div class="servers-container" id="serversContainer" style="display: block !important; margin-top: 24px;">
        <!-- 动态生成的服务器项目将在这里显示 -->
      </div>
    </div>
    
    <!-- 空状态提示 -->
    <div class="empty-state" id="emptyState" style="display: none;">
      <div class="empty-state-content">
        <div class="empty-state-icon">📦</div>
        <h3 class="empty-state-title">暂无服务器数据</h3>
        <p class="empty-state-description">您还没有添加任何服务器，点击上方"添加服务器"按钮开始添加吧！</p>
        <button class="empty-state-btn" onclick="openAddModal()">
          + 添加第一台服务器
        </button>
      </div>
    </div>
  </div>
  
  <!-- 自定义确认框 -->
  <div class="custom-alert-overlay" id="customAlertOverlay">
    <div class="custom-alert-modal">
      <div class="custom-alert-content">
        <div class="custom-alert-icon" id="customAlertIcon">
          <!-- 图标将通过JavaScript动态设置 -->
        </div>
        <div class="custom-alert-message" id="customAlertMessage">
          消息内容
        </div>
        <div class="custom-alert-buttons">
          <button class="custom-alert-btn custom-alert-ok" id="customAlertOk">确定</button>
        </div>
      </div>
    </div>
  </div>

  <!-- 自定义确认对话框 -->
  <div class="custom-confirm-overlay" id="customConfirmOverlay">
    <div class="custom-confirm-modal">
      <div class="custom-confirm-content">
        <div class="custom-confirm-icon">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="32" height="32">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </div>
        <div class="custom-confirm-message" id="customConfirmMessage">
          确认消息
        </div>
        <div class="custom-confirm-buttons">
          <button class="custom-confirm-btn custom-confirm-cancel" id="customConfirmCancel">取消</button>
          <button class="custom-confirm-btn custom-confirm-ok" id="customConfirmOk">确定</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 修改密码弹窗 -->
  <div class="modal" id="changePasswordModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">修改管理密码</h3>
        <button class="close-btn" onclick="closeChangePasswordModal()">&times;</button>
      </div>
      
      <form id="changePasswordForm">
        <div class="form-group">
          <label class="form-label" for="currentPassword">当前密码 *</label>
          <input type="password" id="currentPassword" name="currentPassword" class="form-input" required placeholder="请输入当前密码">
        </div>
        
        <div class="form-group">
          <label class="form-label" for="newPassword">新密码 *</label>
          <input type="password" id="newPassword" name="newPassword" class="form-input" required placeholder="请输入新密码">
          <div class="password-strength-indicator" id="passwordStrengthIndicator" style="display: none;">
            <div class="strength-item">
              <div class="strength-check" id="lengthCheck">×</div>
              <span>至少8位字符</span>
            </div>
            <div class="strength-item">
              <div class="strength-check" id="lowercaseCheck">×</div>
              <span>包含小写字母</span>
            </div>
            <div class="strength-item">
              <div class="strength-check" id="uppercaseCheck">×</div>
              <span>包含大写字母</span>
            </div>
            <div class="strength-item">
              <div class="strength-check" id="numberCheck">×</div>
              <span>包含数字</span>
            </div>
            <div class="strength-item">
              <div class="strength-check" id="specialCheck">×</div>
              <span>包含特殊字符(@$!%*?&)</span>
            </div>
          </div>
        </div>
        
        <div class="form-group">
          <label class="form-label" for="confirmNewPassword">确认新密码 *</label>
          <input type="password" id="confirmNewPassword" name="confirmNewPassword" class="form-input" required placeholder="请再次输入新密码">
        </div>
        
        <div class="modal-footer">
          <button type="button" class="btn-cancel" onclick="closeChangePasswordModal()">取消</button>
          <button type="submit" class="btn-submit" id="changePasswordSubmitBtn">
            <span class="btn-text">确认修改</span>
            <div class="btn-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </button>
        </div>
        
        <div id="changePasswordMessage" class="form-message" style="display: none;"></div>
      </form>
    </div>
  </div>
  
  <!-- 添加/编辑服务器弹窗 -->
  <div class="modal" id="serverModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title" id="modalTitle">添加服务器</h3>
        <button class="close-btn" onclick="closeModal()">&times;</button>
      </div>
      
      <form id="serverForm">
        <div class="form-grid">
          <div class="form-group">
            <label class="form-label" for="merchant">商家 *</label>
            <input type="text" id="merchant" name="merchant" class="form-input" required>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="serverType">服务器类型</label>
            <div class="custom-select" id="serverTypeSelect">
              <div class="custom-select-trigger" tabindex="0">
                <span class="custom-select-text">独服</span>
                <svg class="custom-select-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <div class="custom-select-dropdown">
                <div class="custom-select-option selected" data-value="独服">独服</div>
                <div class="custom-select-option" data-value="KVM">KVM</div>
                <div class="custom-select-option" data-value="LXC">LXC</div>
              </div>
            </div>
            <input type="hidden" id="serverType" name="serverType" value="独服">
          </div>
          
          <div class="form-group">
            <label class="form-label" for="cpu">CPU</label>
            <input type="text" id="cpu" name="cpu" class="form-input" placeholder="如: 2核">
          </div>
          
          <div class="form-group">
            <label class="form-label" for="memory">内存</label>
            <input type="text" id="memory" name="memory" class="form-input" placeholder="如: 4GB">
          </div>
          
          <!-- 存储和流量 - 左右并排布局 -->
          <div class="form-group form-group-split">
            <div class="form-split-container">
              <div class="form-split-item">
            <label class="form-label" for="storage">存储</label>
            <input type="text" id="storage" name="storage" class="form-input" placeholder="如: 40GB SSD">
              </div>
              <div class="form-split-item">
                <label class="form-label" for="traffic">流量</label>
                <input type="text" id="traffic" name="traffic" class="form-input" placeholder="如: 1TB/月">
              </div>
            </div>
          </div>
          
                        <div class="form-group">
                <label class="form-label" for="countryCode">国家</label>
            <div class="custom-select custom-select-searchable" id="countryCodeSelect">
              <div class="custom-select-trigger" tabindex="0">
                <span class="custom-select-text">请选择国家</span>
                <svg class="custom-select-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <div class="custom-select-dropdown">
                <div class="custom-select-search">
                  <input type="text" class="custom-select-search-input" placeholder="搜索国家..." autocomplete="off">
                </div>
                <div class="custom-select-options">
                  <div class="custom-select-option selected" data-value="">请选择国家</div>
                  <!-- 国家选项将通过JavaScript动态生成 -->
                </div>
              </div>
            </div>
            <input type="hidden" id="countryCode" name="countryCode" value="">
              </div>
          
          <div class="form-group">
            <label class="form-label" for="salePrice">出售金额</label>
            <div class="price-input-container" style="position: relative; display: flex; align-items: center; background: #ffffff; border-radius: 10px; backdrop-filter: none; -webkit-backdrop-filter: none; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05); transition: all 0.2s ease; border: 1px solid rgba(229, 231, 235, 0.3);">
              <input type="number" id="salePriceAmount" name="salePriceAmount" placeholder="1,000" step="0.01" min="0" onchange="updateSalePrice()" style="flex: 1; border: none; background: transparent; padding: 14px 16px; font-size: 0.875rem; font-weight: 500; color: #374151; outline: none; -webkit-appearance: none; -moz-appearance: textfield;">
              <div class="currency-select-wrapper" style="position: relative; min-width: 90px;">
                <div class="custom-select currency-select custom-select-searchable" id="salePriceCurrencySelect" style="border: none; background: transparent; min-height: auto;">
                  <div class="custom-select-trigger" tabindex="0" style="padding: 14px 24px 14px 8px; border: none; background: transparent; min-height: auto; font-size: 0.875rem; font-weight: 500; color: #374151;">
                    <span class="custom-select-text">CNY</span>
                    <svg class="custom-select-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 14px; height: 14px;">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                  <div class="custom-select-dropdown" style="max-height: 200px; overflow-y: auto;">
                    <div class="custom-select-search">
                      <input type="text" class="custom-select-search-input" placeholder="搜索币种..." autocomplete="off">
                    </div>
                    <div class="custom-select-options">
                      <div class="custom-select-option" data-value="" data-text="币种">币种</div>
                      <div class="custom-select-option" data-value="USD" data-text="usd">USD</div>
                      <div class="custom-select-option" data-value="EUR" data-text="eur">EUR</div>
                      <div class="custom-select-option" data-value="GBP" data-text="gbp">GBP</div>
                      <div class="custom-select-option" data-value="JPY" data-text="jpy">JPY</div>
                      <div class="custom-select-option selected" data-value="CNY" data-text="cny">CNY</div>
                      <div class="custom-select-option" data-value="KRW" data-text="krw">KRW</div>
                      <div class="custom-select-option" data-value="HKD" data-text="hkd">HKD</div>
                      <div class="custom-select-option" data-value="SGD" data-text="sgd">SGD</div>
                      <div class="custom-select-option" data-value="AUD" data-text="aud">AUD</div>
                      <div class="custom-select-option" data-value="CAD" data-text="cad">CAD</div>
                      <div class="custom-select-option" data-value="CHF" data-text="chf">CHF</div>
                      <div class="custom-select-option" data-value="SEK" data-text="sek">SEK</div>
                      <div class="custom-select-option" data-value="NOK" data-text="nok">NOK</div>
                      <div class="custom-select-option" data-value="DKK" data-text="dkk">DKK</div>
                      <div class="custom-select-option" data-value="PLN" data-text="pln">PLN</div>
                      <div class="custom-select-option" data-value="CZK" data-text="czk">CZK</div>
                      <div class="custom-select-option" data-value="HUF" data-text="huf">HUF</div>
                      <div class="custom-select-option" data-value="RON" data-text="ron">RON</div>
                      <div class="custom-select-option" data-value="BGN" data-text="bgn">BGN</div>
                      <div class="custom-select-option" data-value="RUB" data-text="rub">RUB</div>
                      <div class="custom-select-option" data-value="TRY" data-text="try">TRY</div>
                      <div class="custom-select-option" data-value="BRL" data-text="brl">BRL</div>
                      <div class="custom-select-option" data-value="MXN" data-text="mxn">MXN</div>
                      <div class="custom-select-option" data-value="ARS" data-text="ars">ARS</div>
                      <div class="custom-select-option" data-value="INR" data-text="inr">INR</div>
                      <div class="custom-select-option" data-value="THB" data-text="thb">THB</div>
                      <div class="custom-select-option" data-value="VND" data-text="vnd">VND</div>
                      <div class="custom-select-option" data-value="IDR" data-text="idr">IDR</div>
                      <div class="custom-select-option" data-value="MYR" data-text="myr">MYR</div>
                      <div class="custom-select-option" data-value="PHP" data-text="php">PHP</div>
                      <div class="custom-select-option" data-value="ZAR" data-text="zar">ZAR</div>
                      <div class="custom-select-option" data-value="EGP" data-text="egp">EGP</div>
                      <div class="custom-select-option" data-value="TWD" data-text="twd">TWD</div>
                      <div class="custom-select-option" data-value="NZD" data-text="nzd">NZD</div>
                      <div class="custom-select-option" data-value="ILS" data-text="ils">ILS</div>
                      <div class="custom-select-option" data-value="SAR" data-text="sar">SAR</div>
                      <div class="custom-select-option" data-value="AED" data-text="aed">AED</div>
                      <div class="custom-select-option" data-value="QAR" data-text="qar">QAR</div>
                      <div class="custom-select-option" data-value="KWD" data-text="kwd">KWD</div>
                      <div class="custom-select-option" data-value="BHD" data-text="bhd">BHD</div>
                      <div class="custom-select-option" data-value="OMR" data-text="omr">OMR</div>
                    </div>
                  </div>
                </div>
              </div>
              <input type="hidden" id="salePriceCurrency" name="salePriceCurrency" value="CNY">
            </div>
            <input type="hidden" id="salePrice" name="salePrice">
            <div style="font-size: 0.75rem; color: #6b7280; margin-top: 4px;">请输入数字金额并选择货币类型</div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="renewalPrice">续费价格</label>
            <div class="price-input-container" style="position: relative; display: flex; align-items: center; background: #ffffff; border-radius: 10px; backdrop-filter: none; -webkit-backdrop-filter: none; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05); transition: all 0.2s ease; border: 1px solid rgba(229, 231, 235, 0.3);">
              <input type="number" id="renewalPriceAmount" name="renewalPriceAmount" placeholder="299" step="0.01" min="0" onchange="updateRenewalPrice()" style="flex: 1; border: none; background: transparent; padding: 14px 16px; font-size: 0.875rem; font-weight: 500; color: #374151; outline: none; -webkit-appearance: none; -moz-appearance: textfield;">
              <div class="currency-select-wrapper" style="position: relative; min-width: 90px;">
                <div class="custom-select currency-select custom-select-searchable" id="renewalPriceCurrencySelect" style="border: none; background: transparent; min-height: auto;">
                  <div class="custom-select-trigger" tabindex="0" style="padding: 14px 24px 14px 8px; border: none; background: transparent; min-height: auto; font-size: 0.875rem; font-weight: 500; color: #374151;">
                    <span class="custom-select-text">币种</span>
                    <svg class="custom-select-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 14px; height: 14px;">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                  <div class="custom-select-dropdown" style="max-height: 200px; overflow-y: auto;">
                    <div class="custom-select-search">
                      <input type="text" class="custom-select-search-input" placeholder="搜索币种..." autocomplete="off">
                    </div>
                    <div class="custom-select-options">
                      <div class="custom-select-option selected" data-value="" data-text="币种">币种</div>
                      <div class="custom-select-option" data-value="USD" data-text="usd">USD</div>
                      <div class="custom-select-option" data-value="EUR" data-text="eur">EUR</div>
                      <div class="custom-select-option" data-value="GBP" data-text="gbp">GBP</div>
                      <div class="custom-select-option" data-value="JPY" data-text="jpy">JPY</div>
                      <div class="custom-select-option" data-value="CNY" data-text="cny">CNY</div>
                      <div class="custom-select-option" data-value="KRW" data-text="krw">KRW</div>
                      <div class="custom-select-option" data-value="HKD" data-text="hkd">HKD</div>
                      <div class="custom-select-option" data-value="SGD" data-text="sgd">SGD</div>
                      <div class="custom-select-option" data-value="AUD" data-text="aud">AUD</div>
                      <div class="custom-select-option" data-value="CAD" data-text="cad">CAD</div>
                      <div class="custom-select-option" data-value="CHF" data-text="chf">CHF</div>
                      <div class="custom-select-option" data-value="SEK" data-text="sek">SEK</div>
                      <div class="custom-select-option" data-value="NOK" data-text="nok">NOK</div>
                      <div class="custom-select-option" data-value="DKK" data-text="dkk">DKK</div>
                      <div class="custom-select-option" data-value="PLN" data-text="pln">PLN</div>
                      <div class="custom-select-option" data-value="CZK" data-text="czk">CZK</div>
                      <div class="custom-select-option" data-value="HUF" data-text="huf">HUF</div>
                      <div class="custom-select-option" data-value="RON" data-text="ron">RON</div>
                      <div class="custom-select-option" data-value="BGN" data-text="bgn">BGN</div>
                      <div class="custom-select-option" data-value="RUB" data-text="rub">RUB</div>
                      <div class="custom-select-option" data-value="TRY" data-text="try">TRY</div>
                      <div class="custom-select-option" data-value="BRL" data-text="brl">BRL</div>
                      <div class="custom-select-option" data-value="MXN" data-text="mxn">MXN</div>
                      <div class="custom-select-option" data-value="ARS" data-text="ars">ARS</div>
                      <div class="custom-select-option" data-value="INR" data-text="inr">INR</div>
                      <div class="custom-select-option" data-value="THB" data-text="thb">THB</div>
                      <div class="custom-select-option" data-value="VND" data-text="vnd">VND</div>
                      <div class="custom-select-option" data-value="IDR" data-text="idr">IDR</div>
                      <div class="custom-select-option" data-value="MYR" data-text="myr">MYR</div>
                      <div class="custom-select-option" data-value="PHP" data-text="php">PHP</div>
                      <div class="custom-select-option" data-value="ZAR" data-text="zar">ZAR</div>
                      <div class="custom-select-option" data-value="EGP" data-text="egp">EGP</div>
                      <div class="custom-select-option" data-value="TWD" data-text="twd">TWD</div>
                      <div class="custom-select-option" data-value="NZD" data-text="nzd">NZD</div>
                      <div class="custom-select-option" data-value="ILS" data-text="ils">ILS</div>
                      <div class="custom-select-option" data-value="SAR" data-text="sar">SAR</div>
                      <div class="custom-select-option" data-value="AED" data-text="aed">AED</div>
                      <div class="custom-select-option" data-value="QAR" data-text="qar">QAR</div>
                      <div class="custom-select-option" data-value="KWD" data-text="kwd">KWD</div>
                      <div class="custom-select-option" data-value="BHD" data-text="bhd">BHD</div>
                      <div class="custom-select-option" data-value="OMR" data-text="omr">OMR</div>
                    </div>
                  </div>
                </div>
              </div>
              <input type="hidden" id="renewalPriceCurrency" name="renewalPriceCurrency" value="">
            </div>
            <input type="hidden" id="renewalPrice" name="renewalPrice">
            <div style="font-size: 0.75rem; color: #6b7280; margin-top: 4px;">请输入数字金额并选择货币类型</div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="renewalCycle">续费周期</label>
            <div class="custom-select" id="renewalCycleSelect">
              <div class="custom-select-trigger" tabindex="0">
                <span class="custom-select-text">请选择周期</span>
                <svg class="custom-select-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <div class="custom-select-dropdown">
                <div class="custom-select-option" data-value="">请选择周期</div>
                <div class="custom-select-option" data-value="月付">月付</div>
                <div class="custom-select-option" data-value="季付">季付</div>
                <div class="custom-select-option" data-value="半年付">半年付</div>
                <div class="custom-select-option" data-value="年付">年付</div>
                <div class="custom-select-option" data-value="两年付">两年付</div>
                <div class="custom-select-option" data-value="三年付">三年付</div>
                <div class="custom-select-option" data-value="五年付">五年付</div>
                <div class="custom-select-option" data-value="永久">永久</div>
              </div>
            </div>
            <input type="hidden" id="renewalCycle" name="renewalCycle" value="">
          </div>
          

          
          <div class="form-group">
            <label class="form-label" for="expirationDate">到期日期</label>
            <div class="custom-date-picker">
              <input type="date" id="expirationDate" name="expirationDate" onchange="calculateValues()">
              <div class="custom-date-input" id="expirationDateDisplay">
                <input type="text" class="date-input-field" id="dateInputField" placeholder="YYYY-MM-DD 或点击日历选择" maxlength="10" autocomplete="off">
                <svg class="calendar-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
              <div class="custom-calendar" id="expirationDateCalendar">
                <div class="calendar-header">
                  <button type="button" class="calendar-nav-btn" id="prevMonth">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                  </button>
                  <div class="calendar-month-year" id="monthYear"></div>
                  <button type="button" class="calendar-nav-btn" id="nextMonth">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </button>
                </div>
                <div class="calendar-weekdays">
                  <div class="calendar-weekday">日</div>
                  <div class="calendar-weekday">一</div>
                  <div class="calendar-weekday">二</div>
                  <div class="calendar-weekday">三</div>
                  <div class="calendar-weekday">四</div>
                  <div class="calendar-weekday">五</div>
                  <div class="calendar-weekday">六</div>
                </div>
                <div class="calendar-days" id="calendarDays"></div>
                <div class="calendar-footer">
                  <button type="button" class="calendar-clear-btn" id="clearDate">清除</button>
                  <button type="button" class="calendar-today-btn" id="selectToday">今天</button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="remainingValue">剩余价值 <span style="font-size: 0.75rem; color: #6b7280;">(自动计算)</span></label>
            <input type="hidden" id="remainingValue" name="remainingValue">
            <input type="text" id="remainingValueDisplay" class="form-input" placeholder="将自动计算" readonly style="background: rgba(243, 244, 246, 0.8); cursor: not-allowed;">
          </div>
          
          <div class="form-group">
            <label class="form-label" for="premiumValue">溢价信息 <span style="font-size: 0.75rem; color: #6b7280;">(自动计算)</span></label>
            <input type="hidden" id="premiumValue" name="premiumValue">
            <input type="text" id="premiumValueDisplay" class="form-input" placeholder="将自动计算" readonly style="background: rgba(243, 244, 246, 0.8); cursor: not-allowed;">
          </div>
          
          <!-- 计算详情信息 - 占满整行 -->
          <div class="form-group full-width">
            <label class="form-label">计算详情</label>
            <div class="calculation-details">
              <div id="remainingValueInfo" style="font-size: 0.8125rem; color: #475569; margin-bottom: 12px; line-height: 1.5; font-weight: 500;"></div>
              <div id="premiumValueInfo" style="font-size: 0.8125rem; color: #475569; line-height: 1.5; font-weight: 500;"></div>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="status">状态</label>
            <div class="custom-select" id="statusSelect">
              <div class="custom-select-trigger" tabindex="0">
                <span class="custom-select-text">出售</span>
                <svg class="custom-select-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </div>
              <div class="custom-select-dropdown">
                <div class="custom-select-option selected" data-value="出售">出售</div>
                <div class="custom-select-option" data-value="已售">已售</div>
              </div>
            </div>
            <input type="hidden" id="status" name="status" value="出售">
            <input type="hidden" id="statusChangedDate" name="statusChangedDate">
            <!-- 存储销售时的汇率信息 -->
            <input type="hidden" id="soldExchangeRates" name="soldExchangeRates">
            
            <!-- 已售状态详细设置 -->
            <div id="soldStatusDetails" class="sold-status-details" style="display: none; margin-top: 12px;">
              <div class="sold-details-container">
                <div class="sold-detail-item">
                  <label class="sold-detail-label">已售时间</label>
                  <input type="text" id="soldDate" class="sold-detail-input" placeholder="YYYY-MM-DD" maxlength="10" />
                </div>
                <div class="sold-detail-item">
                  <label class="sold-detail-label">汇率基准</label>
                  <div class="sold-rate-input-container">
                    <input type="number" id="soldExchangeRate" name="soldExchangeRate" class="sold-detail-input" placeholder="获取当天汇率中..." step="0.0001" min="0" />
                    <span class="sold-rate-currency">CNY</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <label class="form-label" for="sortOrder">顺序ID</label>
            <input type="number" id="sortOrder" name="sortOrder" class="form-input" placeholder="用于排序，数字越小越靠前" min="1">
          </div>
          
          <div class="form-group">
            <label class="form-label" for="telegramLink">Telegram链接 (可选)</label>
            <input type="url" id="telegramLink" name="telegramLink" class="form-input" placeholder="https://t.me/...">
          </div>
          
          <div class="form-group">
            <label class="form-label" for="nodeseekLink">NodeSeek链接 (可选)</label>
            <input type="url" id="nodeseekLink" name="nodeseekLink" class="form-input" placeholder="https://www.nodeseek.com/...">
          </div>
          
          <div class="form-group full-width">
            <label class="form-label" for="tags">标签 (可选)</label>
            <input type="text" id="tags" name="tags" class="form-input" placeholder="用逗号分隔，如: ECS,华东1,高性能">
          </div>
          
          <div class="form-group full-width">
            <label class="form-label" for="relatedLinks">相关链接 (可选)</label>
            <textarea id="relatedLinks" name="relatedLinks" class="form-textarea" placeholder="每行一个链接，格式: 名称|URL&#10;如: 控制台|https://console.example.com"></textarea>
          </div>
        </div>
        
        <div class="modal-footer">
          <button type="button" class="btn-cancel" onclick="closeModal()">取消</button>
          <button type="submit" class="btn-submit" id="submitBtn">添加服务器</button>
        </div>
      </form>
    </div>
  </div>

  <script is:inline>
    // API基础URL - Docker单容器反向代理模式
    const API_BASE = (() => {
      const currentHost = window.location.hostname;
      if (currentHost === 'localhost' || currentHost === '127.0.0.1') {
        // 开发环境直接访问API端口
        return 'http://localhost:3001/api';
      } else {
        // 生产环境（Docker）：使用反向代理
        return '/api';
      }
    })();
    let currentEditId = null;

    // 自定义下拉框工具函数
    function getCustomSelectValue(selectId) {
      const selectElement = document.getElementById(selectId);
      if (!selectElement) {
        console.warn(`自定义下拉框元素未找到: ${selectId}`);
        return '';
      }
      
      // 先尝试从隐藏的input获取值
      const hiddenInput = document.getElementById(selectId.replace('Select', ''));
      if (hiddenInput && hiddenInput.value) {
        return hiddenInput.value;
      }
      
      // 否则从选中的选项获取值
      const selectedOption = selectElement.querySelector('.custom-select-option.selected');
      if (selectedOption) {
        return selectedOption.getAttribute('data-value') || '';
      }
      
      return '';
    }
    
    // 国家数据
    const COUNTRIES = [
      { value: "", text: "请选择国家" },
      { value: "ad", text: "安道尔 (AD)" },
      { value: "ae", text: "阿联酋 (AE)" },
      { value: "af", text: "阿富汗 (AF)" },
      { value: "ag", text: "安提瓜和巴布达 (AG)" },
      { value: "ai", text: "安圭拉 (AI)" },
      { value: "al", text: "阿尔巴尼亚 (AL)" },
      { value: "am", text: "亚美尼亚 (AM)" },
      { value: "ao", text: "安哥拉 (AO)" },
      { value: "aq", text: "南极洲 (AQ)" },
      { value: "ar", text: "阿根廷 (AR)" },
      { value: "as", text: "美属萨摩亚 (AS)" },
      { value: "at", text: "奥地利 (AT)" },
      { value: "au", text: "澳大利亚 (AU)" },
      { value: "aw", text: "阿鲁巴 (AW)" },
      { value: "ax", text: "奥兰群岛 (AX)" },
      { value: "az", text: "阿塞拜疆 (AZ)" },
      { value: "ba", text: "波斯尼亚和黑塞哥维那 (BA)" },
      { value: "bb", text: "巴巴多斯 (BB)" },
      { value: "bd", text: "孟加拉国 (BD)" },
      { value: "be", text: "比利时 (BE)" },
      { value: "bf", text: "布基纳法索 (BF)" },
      { value: "bg", text: "保加利亚 (BG)" },
      { value: "bh", text: "巴林 (BH)" },
      { value: "bi", text: "布隆迪 (BI)" },
      { value: "bj", text: "贝宁 (BJ)" },
      { value: "bl", text: "圣巴泰勒米 (BL)" },
      { value: "bm", text: "百慕大 (BM)" },
      { value: "bn", text: "文莱 (BN)" },
      { value: "bo", text: "玻利维亚 (BO)" },
      { value: "bq", text: "荷属加勒比区 (BQ)" },
      { value: "br", text: "巴西 (BR)" },
      { value: "bs", text: "巴哈马 (BS)" },
      { value: "bt", text: "不丹 (BT)" },
      { value: "bv", text: "布韦岛 (BV)" },
      { value: "bw", text: "博茨瓦纳 (BW)" },
      { value: "by", text: "白俄罗斯 (BY)" },
      { value: "bz", text: "伯利兹 (BZ)" },
      { value: "ca", text: "加拿大 (CA)" },
      { value: "cc", text: "科科斯群岛 (CC)" },
      { value: "cd", text: "刚果民主共和国 (CD)" },
      { value: "ce", text: "休达 (CE)" },
      { value: "cf", text: "中非共和国 (CF)" },
      { value: "cg", text: "刚果共和国 (CG)" },
      { value: "ch", text: "瑞士 (CH)" },
      { value: "ci", text: "科特迪瓦 (CI)" },
      { value: "ck", text: "库克群岛 (CK)" },
      { value: "cl", text: "智利 (CL)" },
      { value: "cm", text: "喀麦隆 (CM)" },
      { value: "cn", text: "中国 (CN)" },
      { value: "co", text: "哥伦比亚 (CO)" },
      { value: "cp", text: "克利珀顿岛 (CP)" },
      { value: "cr", text: "哥斯达黎加 (CR)" },
      { value: "cu", text: "古巴 (CU)" },
      { value: "cv", text: "佛得角 (CV)" },
      { value: "cw", text: "库拉索 (CW)" },
      { value: "cx", text: "圣诞岛 (CX)" },
      { value: "cy", text: "塞浦路斯 (CY)" },
      { value: "cz", text: "捷克 (CZ)" },
      { value: "de", text: "德国 (DE)" },
      { value: "dg", text: "迪戈加西亚 (DG)" },
      { value: "dj", text: "吉布提 (DJ)" },
      { value: "dk", text: "丹麦 (DK)" },
      { value: "dm", text: "多米尼克 (DM)" },
      { value: "do", text: "多米尼加共和国 (DO)" },
      { value: "dz", text: "阿尔及利亚 (DZ)" },
      { value: "ea", text: "休达和梅利利亚 (EA)" },
      { value: "ec", text: "厄瓜多尔 (EC)" },
      { value: "ee", text: "爱沙尼亚 (EE)" },
      { value: "eg", text: "埃及 (EG)" },
      { value: "eh", text: "西撒哈拉 (EH)" },
      { value: "er", text: "厄立特里亚 (ER)" },
      { value: "es", text: "西班牙 (ES)" },
      { value: "et", text: "埃塞俄比亚 (ET)" },
      { value: "eu", text: "欧盟 (EU)" },
      { value: "fi", text: "芬兰 (FI)" },
      { value: "fj", text: "斐济 (FJ)" },
      { value: "fk", text: "福克兰群岛 (FK)" },
      { value: "fm", text: "密克罗尼西亚 (FM)" },
      { value: "fo", text: "法罗群岛 (FO)" },
      { value: "fr", text: "法国 (FR)" },
      { value: "ga", text: "加蓬 (GA)" },
      { value: "gb", text: "英国 (GB)" },
      { value: "gd", text: "格林纳达 (GD)" },
      { value: "ge", text: "格鲁吉亚 (GE)" },
      { value: "gf", text: "法属圭亚那 (GF)" },
      { value: "gg", text: "根西岛 (GG)" },
      { value: "gh", text: "加纳 (GH)" },
      { value: "gi", text: "直布罗陀 (GI)" },
      { value: "gl", text: "格陵兰 (GL)" },
      { value: "gm", text: "冈比亚 (GM)" },
      { value: "gn", text: "几内亚 (GN)" },
      { value: "gp", text: "瓜德罗普 (GP)" },
      { value: "gq", text: "赤道几内亚 (GQ)" },
      { value: "gr", text: "希腊 (GR)" },
      { value: "gs", text: "南乔治亚和南桑威奇群岛 (GS)" },
      { value: "gt", text: "危地马拉 (GT)" },
      { value: "gu", text: "关岛 (GU)" },
      { value: "gw", text: "几内亚比绍 (GW)" },
      { value: "gy", text: "圭亚那 (GY)" },
      { value: "hk", text: "香港 (HK)" },
      { value: "hm", text: "赫德岛和麦克唐纳群岛 (HM)" },
      { value: "hn", text: "洪都拉斯 (HN)" },
      { value: "hr", text: "克罗地亚 (HR)" },
      { value: "ht", text: "海地 (HT)" },
      { value: "hu", text: "匈牙利 (HU)" },
      { value: "ic", text: "加那利群岛 (IC)" },
      { value: "id", text: "印度尼西亚 (ID)" },
      { value: "ie", text: "爱尔兰 (IE)" },
      { value: "il", text: "以色列 (IL)" },
      { value: "im", text: "马恩岛 (IM)" },
      { value: "in", text: "印度 (IN)" },
      { value: "io", text: "英属印度洋领地 (IO)" },
      { value: "iq", text: "伊拉克 (IQ)" },
      { value: "ir", text: "伊朗 (IR)" },
      { value: "is", text: "冰岛 (IS)" },
      { value: "it", text: "意大利 (IT)" },
      { value: "je", text: "泽西岛 (JE)" },
      { value: "jm", text: "牙买加 (JM)" },
      { value: "jo", text: "约旦 (JO)" },
      { value: "jp", text: "日本 (JP)" },
      { value: "ke", text: "肯尼亚 (KE)" },
      { value: "kg", text: "吉尔吉斯斯坦 (KG)" },
      { value: "kh", text: "柬埔寨 (KH)" },
      { value: "ki", text: "基里巴斯 (KI)" },
      { value: "km", text: "科摩罗 (KM)" },
      { value: "kn", text: "圣基茨和尼维斯 (KN)" },
      { value: "kp", text: "朝鲜 (KP)" },
      { value: "kr", text: "韩国 (KR)" },
      { value: "kw", text: "科威特 (KW)" },
      { value: "ky", text: "开曼群岛 (KY)" },
      { value: "kz", text: "哈萨克斯坦 (KZ)" },
      { value: "la", text: "老挝 (LA)" },
      { value: "lb", text: "黎巴嫩 (LB)" },
      { value: "lc", text: "圣卢西亚 (LC)" },
      { value: "li", text: "列支敦士登 (LI)" },
      { value: "lk", text: "斯里兰卡 (LK)" },
      { value: "lr", text: "利比里亚 (LR)" },
      { value: "ls", text: "莱索托 (LS)" },
      { value: "lt", text: "立陶宛 (LT)" },
      { value: "lu", text: "卢森堡 (LU)" },
      { value: "lv", text: "拉脱维亚 (LV)" },
      { value: "ly", text: "利比亚 (LY)" },
      { value: "ma", text: "摩洛哥 (MA)" },
      { value: "mc", text: "摩纳哥 (MC)" },
      { value: "md", text: "摩尔多瓦 (MD)" },
      { value: "me", text: "黑山 (ME)" },
      { value: "mf", text: "法属圣马丁 (MF)" },
      { value: "mg", text: "马达加斯加 (MG)" },
      { value: "mh", text: "马绍尔群岛 (MH)" },
      { value: "mk", text: "北马其顿 (MK)" },
      { value: "ml", text: "马里 (ML)" },
      { value: "mm", text: "缅甸 (MM)" },
      { value: "mn", text: "蒙古 (MN)" },
      { value: "mo", text: "澳门 (MO)" },
      { value: "mp", text: "北马里亚纳群岛 (MP)" },
      { value: "mq", text: "马提尼克 (MQ)" },
      { value: "mr", text: "毛里塔尼亚 (MR)" },
      { value: "ms", text: "蒙特塞拉特 (MS)" },
      { value: "mt", text: "马耳他 (MT)" },
      { value: "mu", text: "毛里求斯 (MU)" },
      { value: "mv", text: "马尔代夫 (MV)" },
      { value: "mw", text: "马拉维 (MW)" },
      { value: "mx", text: "墨西哥 (MX)" },
      { value: "my", text: "马来西亚 (MY)" },
      { value: "mz", text: "莫桑比克 (MZ)" },
      { value: "na", text: "纳米比亚 (NA)" },
      { value: "nc", text: "新喀里多尼亚 (NC)" },
      { value: "ne", text: "尼日尔 (NE)" },
      { value: "nf", text: "诺福克岛 (NF)" },
      { value: "ng", text: "尼日利亚 (NG)" },
      { value: "ni", text: "尼加拉瓜 (NI)" },
      { value: "nl", text: "荷兰 (NL)" },
      { value: "no", text: "挪威 (NO)" },
      { value: "np", text: "尼泊尔 (NP)" },
      { value: "nr", text: "瑙鲁 (NR)" },
      { value: "nu", text: "纽埃 (NU)" },
      { value: "nz", text: "新西兰 (NZ)" },
      { value: "om", text: "阿曼 (OM)" },
      { value: "pa", text: "巴拿马 (PA)" },
      { value: "pc", text: "太平洋岛屿信托领土 (PC)" },
      { value: "pe", text: "秘鲁 (PE)" },
      { value: "pf", text: "法属波利尼西亚 (PF)" },
      { value: "pg", text: "巴布亚新几内亚 (PG)" },
      { value: "ph", text: "菲律宾 (PH)" },
      { value: "pk", text: "巴基斯坦 (PK)" },
      { value: "pl", text: "波兰 (PL)" },
      { value: "pm", text: "圣皮埃尔和密克隆 (PM)" },
      { value: "pn", text: "皮特凯恩群岛 (PN)" },
      { value: "pr", text: "波多黎各 (PR)" },
      { value: "ps", text: "巴勒斯坦 (PS)" },
      { value: "pt", text: "葡萄牙 (PT)" },
      { value: "pw", text: "帕劳 (PW)" },
      { value: "py", text: "巴拉圭 (PY)" },
      { value: "qa", text: "卡塔尔 (QA)" },
      { value: "re", text: "留尼汪 (RE)" },
      { value: "ro", text: "罗马尼亚 (RO)" },
      { value: "rs", text: "塞尔维亚 (RS)" },
      { value: "ru", text: "俄罗斯 (RU)" },
      { value: "rw", text: "卢旺达 (RW)" },
      { value: "sa", text: "沙特阿拉伯 (SA)" },
      { value: "sb", text: "所罗门群岛 (SB)" },
      { value: "sc", text: "塞舌尔 (SC)" },
      { value: "sd", text: "苏丹 (SD)" },
      { value: "se", text: "瑞典 (SE)" },
      { value: "sg", text: "新加坡 (SG)" },
      { value: "sh", text: "圣赫勒拿 (SH)" },
      { value: "si", text: "斯洛文尼亚 (SI)" },
      { value: "sj", text: "斯瓦尔巴和扬马延 (SJ)" },
      { value: "sk", text: "斯洛伐克 (SK)" },
      { value: "sl", text: "塞拉利昂 (SL)" },
      { value: "sm", text: "圣马力诺 (SM)" },
      { value: "sn", text: "塞内加尔 (SN)" },
      { value: "so", text: "索马里 (SO)" },
      { value: "sr", text: "苏里南 (SR)" },
      { value: "ss", text: "南苏丹 (SS)" },
      { value: "st", text: "圣多美和普林西比 (ST)" },
      { value: "sv", text: "萨尔瓦多 (SV)" },
      { value: "sx", text: "荷属圣马丁 (SX)" },
      { value: "sy", text: "叙利亚 (SY)" },
      { value: "sz", text: "斯威士兰 (SZ)" },
      { value: "tc", text: "特克斯和凯科斯群岛 (TC)" },
      { value: "td", text: "乍得 (TD)" },
      { value: "tf", text: "法属南部领地 (TF)" },
      { value: "tg", text: "多哥 (TG)" },
      { value: "th", text: "泰国 (TH)" },
      { value: "tj", text: "塔吉克斯坦 (TJ)" },
      { value: "tk", text: "托克劳 (TK)" },
      { value: "tl", text: "东帝汶 (TL)" },
      { value: "tm", text: "土库曼斯坦 (TM)" },
      { value: "tn", text: "突尼斯 (TN)" },
      { value: "to", text: "汤加 (TO)" },
      { value: "tr", text: "土耳其 (TR)" },
      { value: "tt", text: "特立尼达和多巴哥 (TT)" },
      { value: "tv", text: "图瓦卢 (TV)" },
      { value: "tw", text: "台湾 (TW)" },
      { value: "tz", text: "坦桑尼亚 (TZ)" },
      { value: "ua", text: "乌克兰 (UA)" },
      { value: "ug", text: "乌干达 (UG)" },
      { value: "um", text: "美国本土外小岛屿 (UM)" },
      { value: "un", text: "联合国 (UN)" },
      { value: "us", text: "美国 (US)" },
      { value: "uy", text: "乌拉圭 (UY)" },
      { value: "uz", text: "乌兹别克斯坦 (UZ)" },
      { value: "va", text: "梵蒂冈 (VA)" },
      { value: "vc", text: "圣文森特和格林纳丁斯 (VC)" },
      { value: "ve", text: "委内瑞拉 (VE)" },
      { value: "vg", text: "英属维尔京群岛 (VG)" },
      { value: "vi", text: "美属维尔京群岛 (VI)" },
      { value: "vn", text: "越南 (VN)" },
      { value: "vu", text: "瓦努阿图 (VU)" },
      { value: "wf", text: "瓦利斯和富图纳 (WF)" },
      { value: "ws", text: "萨摩亚 (WS)" },
      { value: "xk", text: "科索沃 (XK)" },
      { value: "ye", text: "也门 (YE)" },
      { value: "yt", text: "马约特 (YT)" },
      { value: "za", text: "南非 (ZA)" },
      { value: "zm", text: "赞比亚 (ZM)" },
      { value: "zw", text: "津巴布韦 (ZW)" }
    ];

    // 初始化自定义下拉框
    function initCustomSelects() {
      // 初始化国家选择下拉框
      initCountrySelect();
      
      // 初始化币种选择下拉框（带搜索功能）
      initCurrencySelects();
      
      // 初始化其他下拉框
      const selects = ['serverTypeSelect', 'renewalCycleSelect', 'statusSelect'];
      selects.forEach(selectId => {
        initCustomSelect(selectId);
      });
    }
    
    // 初始化币种选择下拉框
    function initCurrencySelects() {
      const currencySelects = ['salePriceCurrencySelect', 'renewalPriceCurrencySelect'];
      currencySelects.forEach(selectId => {
        initCustomSelect(selectId);
        initCurrencySearch(selectId);
      });
    }
    
    // 初始化币种搜索功能
    function initCurrencySearch(selectId) {
      const select = document.getElementById(selectId);
      if (!select) {
        console.error(`币种选择下拉框元素未找到: ${selectId}`);
        return;
      }
      
      const searchInput = select.querySelector('.custom-select-search-input');
      if (!searchInput) {
        console.error(`币种搜索输入框未找到: ${selectId}`);
        return;
      }
      
      const optionsContainer = select.querySelector('.custom-select-options');
      if (!optionsContainer) {
        console.error(`币种选择选项容器未找到: ${selectId}`);
        return;
      }
      
      const allOptions = optionsContainer.querySelectorAll('.custom-select-option');
      
      // 搜索输入事件
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        allOptions.forEach(option => {
          const optionText = option.getAttribute('data-text') || option.textContent.toLowerCase();
          const optionValue = option.getAttribute('data-value') || '';
          
          // 搜索匹配：币种代码
          const matchesText = optionText.includes(searchTerm);
          const matchesCode = optionValue.toLowerCase().includes(searchTerm);
          const isDefaultOption = optionValue === '';
          
          if (searchTerm === '' || matchesText || matchesCode || isDefaultOption) {
            option.style.display = 'block';
          } else {
            option.style.display = 'none';
          }
        });
        
        // 如果没有匹配结果，显示提示
        const visibleOptions = Array.from(allOptions).filter(option => 
          option.style.display !== 'none'
        );
        
        if (visibleOptions.length === 1 && visibleOptions[0].getAttribute('data-value') === '') {
          // 只剩下"币种"选项，显示无结果提示
          if (!optionsContainer.querySelector('.no-results')) {
            const noResults = document.createElement('div');
            noResults.className = 'no-results';
            noResults.style.cssText = `
              padding: 12px 16px;
              color: #6b7280;
              font-size: 0.8125rem;
              font-style: italic;
              text-align: center;
              border-bottom: 1px solid rgba(229, 231, 235, 0.2);
            `;
            noResults.textContent = '未找到匹配的币种';
            optionsContainer.appendChild(noResults);
          }
        } else {
          // 移除无结果提示
          const noResults = optionsContainer.querySelector('.no-results');
          if (noResults) {
            noResults.remove();
          }
        }
      });
      
      // 防止搜索框点击时关闭下拉框
      searchInput.addEventListener('click', function(e) {
        e.stopPropagation();
      });
      
      // 搜索框获得焦点时清空内容
      searchInput.addEventListener('focus', function() {
        this.select();
      });
      
      // 按下ESC键清空搜索
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          this.value = '';
          this.dispatchEvent(new Event('input'));
          select.classList.remove('open');
        }
      });
    }
    
    // 初始化国家选择下拉框
    function initCountrySelect() {
      const select = document.getElementById('countryCodeSelect');
      if (!select) {
        console.error('国家选择下拉框元素未找到');
        return;
      }
      
      const optionsContainer = select.querySelector('.custom-select-options');
      if (!optionsContainer) {
        console.error('国家选择选项容器未找到');
        return;
      }
      
      // 生成国家选项（跳过第一个空选项，因为HTML中已经有了）
      COUNTRIES.forEach((country, index) => {
        if (index === 0) return; // 跳过第一个"请选择国家"选项
        
        const option = document.createElement('div');
        option.className = 'custom-select-option';
        option.setAttribute('data-value', country.value);
        option.setAttribute('data-text', country.text.toLowerCase());
        option.textContent = country.text;
        
        // 确保动态生成的元素能够应用CSS样式
        option.style.cssText = `
          padding: 12px 16px;
          cursor: pointer;
          transition: all 0.15s ease;
          font-size: 0.875rem;
          font-weight: 500;
          color: #374151;
          border-bottom: 1px solid rgba(229, 231, 235, 0.2);
        `;
        
        optionsContainer.appendChild(option);
      });
      
      // 初始化搜索功能
      initCountrySearch();
      
      // 初始化下拉框功能
      initCustomSelect('countryCodeSelect');
    }
    
    // 初始化国家搜索功能
    function initCountrySearch() {
      const select = document.getElementById('countryCodeSelect');
      if (!select) {
        console.error('国家选择下拉框元素未找到');
        return;
      }
      
      const searchInput = select.querySelector('.custom-select-search-input');
      if (!searchInput) {
        console.error('国家搜索输入框未找到');
        return;
      }
      
      const optionsContainer = select.querySelector('.custom-select-options');
      if (!optionsContainer) {
        console.error('国家选择选项容器未找到');
        return;
      }
      
      const allOptions = optionsContainer.querySelectorAll('.custom-select-option');
      
      // 搜索输入事件
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        allOptions.forEach(option => {
          const optionText = option.getAttribute('data-text') || option.textContent.toLowerCase();
          const optionValue = option.getAttribute('data-value') || '';
          
          // 搜索匹配：国家名称或国家代码
          const matchesText = optionText.includes(searchTerm);
          const matchesCode = optionValue.toLowerCase().includes(searchTerm);
          const isDefaultOption = optionValue === '';
          
          if (searchTerm === '' || matchesText || matchesCode || isDefaultOption) {
            option.style.display = 'block';
          } else {
            option.style.display = 'none';
          }
        });
        
        // 如果没有匹配结果，显示提示
        const visibleOptions = Array.from(allOptions).filter(option => 
          option.style.display !== 'none'
        );
        
        if (visibleOptions.length === 1 && visibleOptions[0].getAttribute('data-value') === '') {
          // 只剩下"请选择国家"选项，显示无结果提示
          if (!optionsContainer.querySelector('.no-results')) {
            const noResults = document.createElement('div');
            noResults.className = 'no-results';
            noResults.style.cssText = `
              padding: 12px 16px;
              color: #6b7280;
              font-size: 0.8125rem;
              font-style: italic;
              text-align: center;
              border-bottom: 1px solid rgba(229, 231, 235, 0.2);
            `;
            noResults.textContent = '未找到匹配的国家';
            optionsContainer.appendChild(noResults);
          }
        } else {
          // 移除无结果提示
          const noResults = optionsContainer.querySelector('.no-results');
          if (noResults) {
            noResults.remove();
          }
        }
      });
      
      // 防止搜索框点击时关闭下拉框
      searchInput.addEventListener('click', function(e) {
        e.stopPropagation();
      });
      
      // 搜索框获得焦点时清空内容
      searchInput.addEventListener('focus', function() {
        this.select();
      });
      
      // 按下ESC键清空搜索
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          this.value = '';
          this.dispatchEvent(new Event('input'));
          select.classList.remove('open');
        }
      });
    }
    
    // 初始化单个自定义下拉框
    function initCustomSelect(selectId) {
      const select = document.getElementById(selectId);
      if (!select) return;
      
      const trigger = select.querySelector('.custom-select-trigger');
      const dropdown = select.querySelector('.custom-select-dropdown');
      const isSearchable = select.classList.contains('custom-select-searchable');
      
      // 根据是否可搜索选择不同的选项容器
      let optionsContainer;
      if (isSearchable) {
        optionsContainer = select.querySelector('.custom-select-options');
        // 如果没有找到 .custom-select-options，使用 dropdown
        if (!optionsContainer) {
          optionsContainer = dropdown;
        }
      } else {
        optionsContainer = dropdown;
      }
      
      const options = optionsContainer.querySelectorAll('.custom-select-option');
      const hiddenInput = document.querySelector(`input[name="${selectId.replace('Select', '')}"]`);
      
      // 点击触发器切换下拉框
      trigger.addEventListener('click', function() {
        closeAllSelects();
        select.classList.toggle('open');
        
        // 如果是可搜索的下拉框，打开时聚焦搜索框
        if (isSearchable && select.classList.contains('open')) {
          const searchInput = select.querySelector('.custom-select-search-input');
          if (searchInput) {
            setTimeout(() => {
              searchInput.focus();
            }, 100);
          }
        }
      });
      
      // 键盘导航支持
      trigger.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          closeAllSelects();
          select.classList.toggle('open');
          
          // 如果是可搜索的下拉框，打开时聚焦搜索框
          if (isSearchable && select.classList.contains('open')) {
            const searchInput = select.querySelector('.custom-select-search-input');
            if (searchInput) {
              setTimeout(() => {
                searchInput.focus();
              }, 100);
            }
          }
        }
      });
      
      // 选项点击事件
      options.forEach(option => {
        option.addEventListener('click', function() {
          const value = this.getAttribute('data-value');
          const text = this.textContent;
          
          // 更新显示文本
          trigger.querySelector('.custom-select-text').textContent = text;
          
          // 更新隐藏输入框值
          if (hiddenInput) {
            hiddenInput.value = value;
          }
          
          // 更新选中状态
          options.forEach(opt => opt.classList.remove('selected'));
          this.classList.add('selected');
          
          // 关闭下拉框
          select.classList.remove('open');
          
          // 清空搜索框
          if (isSearchable) {
            const searchInput = select.querySelector('.custom-select-search-input');
            if (searchInput) {
              searchInput.value = '';
              // 重新显示所有选项
              options.forEach(opt => {
                opt.style.display = 'block';
              });
              // 移除无结果提示
              const noResults = optionsContainer.querySelector('.no-results');
              if (noResults) {
                noResults.remove();
              }
            }
          }
          
          // 触发相应的change事件
          if (selectId === 'renewalCycleSelect') {
            handleRenewalCycleChange();
          } else if (selectId === 'statusSelect') {
            handleStatusChange(value);
            calculateValues();
          } else if (selectId === 'countryCodeSelect') {
            handleCountryChange({ value: value });
          } else if (selectId === 'salePriceCurrencySelect') {
            updateSalePrice();
          } else if (selectId === 'renewalPriceCurrencySelect') {
            updateRenewalPrice();
          }
        });
      });
    }
    
    // 关闭所有下拉框
    function closeAllSelects() {
      document.querySelectorAll('.custom-select').forEach(select => {
        select.classList.remove('open');
        
        // 如果是可搜索的下拉框，清空搜索框并重置选项显示
        if (select.classList.contains('custom-select-searchable')) {
          const searchInput = select.querySelector('.custom-select-search-input');
          
          // 获取选项容器 - 国家选择器和币种选择器的结构不同
          let optionsContainer = select.querySelector('.custom-select-options');
          if (!optionsContainer) {
            // 如果没有找到 .custom-select-options，可能是直接在 dropdown 下
            optionsContainer = select.querySelector('.custom-select-dropdown');
          }
          
          if (searchInput) {
            searchInput.value = '';
          }
          
          if (optionsContainer) {
            // 重新显示所有选项
            const options = optionsContainer.querySelectorAll('.custom-select-option');
            options.forEach(option => {
              option.style.display = 'block';
            });
            
            // 移除无结果提示
            const noResults = optionsContainer.querySelector('.no-results');
            if (noResults) {
              noResults.remove();
            }
          }
        }
      });
    }
    
    // 点击外部关闭下拉框
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.custom-select')) {
        closeAllSelects();
      }
    });
    
    // 设置自定义下拉框的值
    function setCustomSelectValue(selectId, value) {
      const select = document.getElementById(selectId);
      if (!select) {
        console.warn(`下拉框元素未找到: ${selectId}`);
        return;
      }
      
      const trigger = select.querySelector('.custom-select-trigger');
      if (!trigger) {
        console.warn(`下拉框触发器未找到: ${selectId}`);
        return;
      }
      
      const isSearchable = select.classList.contains('custom-select-searchable');
      
      // 根据是否可搜索选择不同的选项容器
      let optionsContainer;
      if (isSearchable) {
        optionsContainer = select.querySelector('.custom-select-options');
        // 如果没有找到 .custom-select-options，尝试查找 .custom-select-dropdown
        if (!optionsContainer) {
          optionsContainer = select.querySelector('.custom-select-dropdown');
        }
      } else {
        optionsContainer = select.querySelector('.custom-select-dropdown');
      }
        
      if (!optionsContainer) {
        console.warn(`选项容器未找到: ${selectId}`);
        return;
      }
      
      const options = optionsContainer.querySelectorAll('.custom-select-option');
      const hiddenInput = document.querySelector(`input[name="${selectId.replace('Select', '')}"]`);
      
      // 找到对应的选项
      let targetOption = null;
      options.forEach(option => {
        option.classList.remove('selected');
        if (option.getAttribute('data-value') === value) {
          targetOption = option;
          option.classList.add('selected');
        }
      });
      
      if (targetOption) {
        // 更新显示文本
        const textElement = trigger.querySelector('.custom-select-text');
        if (textElement) {
          textElement.textContent = targetOption.textContent;
        }
        
        // 更新隐藏输入框值
        if (hiddenInput) {
          hiddenInput.value = value;
        }
        
        // 如果是可搜索的下拉框，确保选中的选项可见
        if (isSearchable) {
          targetOption.style.display = 'block';
        }
      } else {
        console.warn(`未找到匹配的选项: ${selectId} -> ${value}`);
        // 如果没有找到匹配的选项，选择第一个选项（通常是默认选项）
        const firstOption = options[0];
        if (firstOption) {
          firstOption.classList.add('selected');
          const textElement = trigger.querySelector('.custom-select-text');
          if (textElement) {
            textElement.textContent = firstOption.textContent;
          }
          if (hiddenInput) {
            hiddenInput.value = firstOption.getAttribute('data-value') || '';
          }
        }
      }
    }
    
    // 自定义日期选择器相关变量
    let currentCalendarDate = new Date();
    let selectedDate = null;
    let isCalendarOpen = false;

    // 月份名称
    const monthNames = [
      '一月', '二月', '三月', '四月', '五月', '六月',
      '七月', '八月', '九月', '十月', '十一月', '十二月'
    ];
    
    // 保存销售时的汇率信息
    async function saveSoldExchangeRates(saleCurrency, renewalCurrency) {
      try {
        const soldRates = {};
        
        // 获取出售价格相关汇率
        if (saleCurrency && saleCurrency !== 'CNY') {
          const saleRateData = await getExchangeRates(saleCurrency);
          soldRates.sale = {
            currency: saleCurrency,
            toCNY: saleRateData.rates.CNY,
            date: saleRateData.date,
            timestamp: saleRateData.timestamp
          };
        }
        
        // 获取续费价格相关汇率
        if (renewalCurrency && renewalCurrency !== 'CNY' && renewalCurrency !== saleCurrency) {
          const renewalRateData = await getExchangeRates(renewalCurrency);
          soldRates.renewal = {
            currency: renewalCurrency,
            toCNY: renewalRateData.rates.CNY,
            date: renewalRateData.date,
            timestamp: renewalRateData.timestamp
          };
        }
        
        // 保存到隐藏字段
        const soldExchangeRatesInput = document.getElementById('soldExchangeRates');
        if (soldExchangeRatesInput) {
          soldExchangeRatesInput.value = JSON.stringify(soldRates);
          console.log('✅ 销售时汇率已保存:', soldRates);
        }
        
        return soldRates;
      } catch (error) {
        console.error('❌ 保存销售时汇率失败:', error);
        return null;
      }
    }
    
    // 获取保存的销售时汇率
    function getSoldExchangeRates() {
      const soldExchangeRatesInput = document.getElementById('soldExchangeRates');
      if (soldExchangeRatesInput && soldExchangeRatesInput.value) {
        try {
          return JSON.parse(soldExchangeRatesInput.value);
        } catch (error) {
          console.error('解析销售时汇率数据失败:', error);
          return null;
        }
      }
      return null;
    }
    
    // 获取汇率（对于已售服务器使用自定义汇率）
    async function getExchangeRatesForCalculation(currency, isSoldServer = false) {
      if (isSoldServer) {
        // 检查是否有自定义汇率
        const soldExchangeRateInput = document.getElementById('soldExchangeRate');
        const soldDateInput = document.getElementById('soldDate');
        const customRate = soldExchangeRateInput ? parseFloat(soldExchangeRateInput.value) : null;
        const soldDate = soldDateInput ? soldDateInput.value : null;
        
        if (customRate && customRate > 0) {
          // 使用用户输入的自定义汇率
          console.log(`🔒 使用已售时自定义汇率: 1 ${currency} = ${customRate} CNY`);
          return {
            rates: { CNY: customRate },
            date: soldDate || formatDateToString(new Date()),
            source: '已售时自定义汇率',
            isLocked: true,
            isCustom: true
          };
        } else {
          // 如果没有自定义汇率，尝试使用保存的汇率
          const soldRates = getSoldExchangeRates();
          if (soldRates) {
            // 检查是否有该货币的保存汇率
            if (soldRates.sale && soldRates.sale.currency === currency) {
              return {
                rates: { CNY: soldRates.sale.toCNY },
                date: soldRates.sale.date,
                source: '销售时锁定汇率',
                isLocked: true
              };
            }
            if (soldRates.renewal && soldRates.renewal.currency === currency) {
              return {
                rates: { CNY: soldRates.renewal.toCNY },
                date: soldRates.renewal.date,
                source: '销售时锁定汇率',
                isLocked: true
              };
            }
          }
          
          // 如果都没有，使用实时汇率
          console.log(`🗓️ 使用已售日期(${soldDate})的实时汇率进行计算`);
          const rateData = await getExchangeRates(currency);
          return {
            ...rateData,
            source: soldDate ? `${soldDate}汇率` : '实时汇率',
            isLocked: true
          };
        }
      }
      
      // 如果不是已售服务器，使用实时汇率
      return await getExchangeRates(currency);
    }

    // 获取并设置当天汇率
    async function setCurrentExchangeRate() {
      const soldExchangeRateInput = document.getElementById('soldExchangeRate');
      if (!soldExchangeRateInput) return;
      
      try {
        soldExchangeRateInput.placeholder = '获取当天汇率中...';
        soldExchangeRateInput.disabled = true;
        
        // 获取主要货币的汇率（以人民币为基准）
        const saleCurrency = document.getElementById('salePriceCurrency')?.value || 'CNY';
        const renewalCurrency = document.getElementById('renewalPriceCurrency')?.value || 'CNY';
        
        // 确定使用哪个货币获取汇率（优先使用非CNY的货币）
        const targetCurrency = saleCurrency !== 'CNY' ? saleCurrency : (renewalCurrency !== 'CNY' ? renewalCurrency : 'USD');
        
        if (targetCurrency === 'CNY') {
          // 如果都是人民币，设置为1
          soldExchangeRateInput.value = '1.0000';
          soldExchangeRateInput.placeholder = '1 CNY = 1 CNY';
        } else {
          // 获取汇率
          const rateData = await getExchangeRates(targetCurrency);
          const rate = rateData.rates.CNY || 1;
          soldExchangeRateInput.value = rate.toFixed(4);
          soldExchangeRateInput.placeholder = `1 ${targetCurrency} = ${rate.toFixed(4)} CNY`;
          console.log(`💱 已设置当天汇率: 1 ${targetCurrency} = ${rate.toFixed(4)} CNY`);
        }
        
        soldExchangeRateInput.disabled = false;
        
        // 触发汇率变更处理，更新隐藏字段
        handleSoldExchangeRateChange();
      } catch (error) {
        console.error('获取当天汇率失败:', error);
        soldExchangeRateInput.placeholder = '获取汇率失败，请手动输入';
        soldExchangeRateInput.disabled = false;
      }
    }
    
    // 处理已售汇率变更
    function handleSoldExchangeRateChange() {
      const soldExchangeRateInput = document.getElementById('soldExchangeRate');
      const soldExchangeRatesInput = document.getElementById('soldExchangeRates');
      
      if (soldExchangeRateInput && soldExchangeRatesInput) {
        const customRate = parseFloat(soldExchangeRateInput.value);
        
        if (!isNaN(customRate) && customRate > 0) {
          // 创建自定义汇率数据
          const customRateData = {
            USD: customRate,
            EUR: customRate,
            GBP: customRate,
            JPY: customRate,
            CNY: 1
          };
          
          // 更新隐藏字段
          soldExchangeRatesInput.value = JSON.stringify(customRateData);
          console.log('🔄 已售汇率变更，保存自定义汇率:', customRate);
        } else {
          // 清除无效汇率
          soldExchangeRatesInput.value = '';
          console.log('🔄 清除无效的自定义汇率');
        }
      }
      
      // 重新计算价值
      setTimeout(() => {
        calculateValues();
      }, 100);
    }
    
    // 通用的日期格式化函数（本地时间）
    function formatDateToString(date) {
      return date.getFullYear() + '-' + 
        String(date.getMonth() + 1).padStart(2, '0') + '-' + 
        String(date.getDate()).padStart(2, '0');
    }
    
    // 格式化已售日期输入
    function formatSoldDateInput(input) {
      let value = input.value.replace(/[^\d-]/g, ''); // 只保留数字和横线
      
      // 自动添加横线
      if (value.length >= 4 && value.indexOf('-') === -1) {
        value = value.slice(0, 4) + '-' + value.slice(4);
      }
      if (value.length >= 7 && value.lastIndexOf('-') === 4) {
        value = value.slice(0, 7) + '-' + value.slice(7);
      }
      
      // 限制长度为10个字符 (YYYY-MM-DD)
      if (value.length > 10) {
        value = value.slice(0, 10);
      }
      
      input.value = value;
      return value;
    }
    
    // 验证已售日期格式
    function validateSoldDate(dateString) {
      // 检查基本格式 YYYY-MM-DD
      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      if (!dateRegex.test(dateString)) {
        return false;
      }
      
      // 检查是否是有效日期
      const date = new Date(dateString + 'T00:00:00');
      const [year, month, day] = dateString.split('-').map(Number);
      
      return date.getFullYear() === year &&
             date.getMonth() === month - 1 &&
             date.getDate() === day;
    }
    
    // 处理已售日期变更
    function handleSoldDateChange() {
      const soldDateInput = document.getElementById('soldDate');
      const statusChangedDateInput = document.getElementById('statusChangedDate');
      
      if (soldDateInput && statusChangedDateInput) {
        const dateValue = soldDateInput.value;
        
        // 清除所有状态类
        soldDateInput.classList.remove('error', 'warning', 'success');
        
        // 验证日期
        if (dateValue.length === 10) {
          if (validateSoldDate(dateValue)) {
            soldDateInput.classList.add('success');
            
            // 同步已售日期到状态变更日期字段
            statusChangedDateInput.value = dateValue;
            
            console.log('📅 已售日期变更:', dateValue);
            
            // 重新计算价值
            setTimeout(() => {
              calculateValues();
            }, 100);
          } else {
            // 无效日期，显示错误样式
            soldDateInput.classList.add('error');
            // 清除隐藏字段的无效值
            statusChangedDateInput.value = '';
            console.warn('❌ 无效的日期格式:', dateValue);
          }
        } else if (dateValue.length > 0) {
          // 日期不完整，显示警告样式
          soldDateInput.classList.add('warning');
          // 清除隐藏字段的不完整值
          statusChangedDateInput.value = '';
        } else {
          // 日期为空，清除隐藏字段
          statusChangedDateInput.value = '';
        }
      }
    }
    
    // 强制同步状态显示 - 确保界面与状态一致
    function syncStatusDisplay() {
      const statusSelect = document.getElementById('statusSelect');
      const soldStatusDetails = document.getElementById('soldStatusDetails');
      
      if (!statusSelect || !soldStatusDetails) {
        return;
      }
      
      const currentStatus = statusSelect.value || getCustomSelectValue('statusSelect');
      console.log('🔄 同步状态显示检查:', currentStatus);
      
      if (currentStatus === '已售') {
        soldStatusDetails.style.display = 'block';
        console.log('✅ 同步：显示已售信息');
      } else {
        soldStatusDetails.style.display = 'none';
        console.log('❌ 同步：隐藏已售信息');
      }
    }
    
    // 处理状态变更
    async function handleStatusChange(newStatus) {
      const statusChangedDateInput = document.getElementById('statusChangedDate');
      const soldStatusDetails = document.getElementById('soldStatusDetails');
      const soldDateInput = document.getElementById('soldDate');
      const soldExchangeRateInput = document.getElementById('soldExchangeRate');
      
      console.log('🔄 状态变更处理:', newStatus);
      
      if (newStatus === '已售') {
        // 显示已售状态详细设置
        if (soldStatusDetails) {
          soldStatusDetails.style.display = 'block';
          console.log('✅ 状态变更：显示已售信息');
        }
        
        // 设置默认已售日期为当前日期（修复时区问题）
        const now = new Date();
        const dateString = formatDateToString(now);
        
        if (statusChangedDateInput) {
          statusChangedDateInput.value = dateString;
        }
        if (soldDateInput) {
          soldDateInput.value = dateString;
        }
        
        // 获取并设置当天汇率
        await setCurrentExchangeRate();
        
        // 保存当前汇率
        const saleCurrency = document.getElementById('salePriceCurrency')?.value;
        const renewalCurrency = document.getElementById('renewalPriceCurrency')?.value;
        
        if (saleCurrency || renewalCurrency) {
          try {
            await saveSoldExchangeRates(saleCurrency, renewalCurrency);
            console.log('🔒 服务器状态变更为已售，汇率已锁定');
          } catch (error) {
            console.error('保存销售时汇率失败:', error);
          }
        }
        
        // 重新计算价值
        setTimeout(() => {
          calculateValues();
        }, 100);
      } else {
        // 隐藏已售状态详细设置
        if (soldStatusDetails) {
          soldStatusDetails.style.display = 'none';
          console.log('❌ 状态变更：隐藏已售信息，当前状态:', newStatus);
        }
        
        // 如果状态不是已售，清除状态变更日期和保存的汇率
        if (statusChangedDateInput) {
          statusChangedDateInput.value = '';
        }
        if (soldDateInput) {
          soldDateInput.value = '';
        }
        if (soldExchangeRateInput) {
          soldExchangeRateInput.value = '';
        }
        const soldExchangeRatesInput = document.getElementById('soldExchangeRates');
        if (soldExchangeRatesInput) {
          soldExchangeRatesInput.value = '';
        }
        
        // 重新计算价值
        setTimeout(() => {
          calculateValues();
        }, 100);
      }
      
      // 强制同步状态显示
      setTimeout(() => {
        syncStatusDisplay();
      }, 150);
    }

    // 自定义确认框函数
    function showCustomAlert(message, type = 'info') {
      const overlay = document.getElementById('customAlertOverlay');
      const messageEl = document.getElementById('customAlertMessage');
      const iconEl = document.getElementById('customAlertIcon');
      const okBtn = document.getElementById('customAlertOk');
      
      if (!overlay || !messageEl || !iconEl || !okBtn) {
        console.error('自定义确认框元素未找到');
        return;
      }
      
      // 设置消息
      messageEl.textContent = message;
      
      // 设置图标和样式
      iconEl.className = 'custom-alert-icon';
      let iconSvg = '';
      
      switch (type) {
        case 'success':
          iconEl.classList.add('success');
          iconSvg = '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="32" height="32"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
          break;
        case 'error':
          iconEl.classList.add('error');
          iconSvg = '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="32" height="32"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
          break;
        case 'warning':
          iconEl.classList.add('warning');
          iconSvg = '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="32" height="32"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.314 18.5c-.77.833.192 2.5 1.732 2.5z"></path></svg>';
          break;
        default: // info
          iconSvg = '<svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="32" height="32"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
      }
      
      iconEl.innerHTML = iconSvg;
      
      // 显示确认框
      requestAnimationFrame(() => {
        overlay.classList.add('show');
      });
      
      // 绑定确定按钮事件
      const closeAlert = () => {
        overlay.classList.add('closing');
        
        // 等待动画完成后移除显示类
        setTimeout(() => {
          overlay.classList.remove('show', 'closing');
          okBtn.removeEventListener('click', closeAlert);
          overlay.removeEventListener('click', overlayCloseAlert);
          document.removeEventListener('keydown', escCloseAlert);
        }, 250);
      };
      
      const overlayCloseAlert = (e) => {
        if (e.target === overlay) {
          closeAlert();
        }
      };
      
      const escCloseAlert = (e) => {
        if (e.key === 'Escape') {
          closeAlert();
        }
      };
      
      okBtn.addEventListener('click', closeAlert);
      overlay.addEventListener('click', overlayCloseAlert);
      document.addEventListener('keydown', escCloseAlert);
      
      // 聚焦到确定按钮
      setTimeout(() => {
        okBtn.focus();
      }, 100);
    }
    
    function showCustomConfirm(message) {
      return new Promise((resolve) => {
        const overlay = document.getElementById('customConfirmOverlay');
        const messageEl = document.getElementById('customConfirmMessage');
        const cancelBtn = document.getElementById('customConfirmCancel');
        const okBtn = document.getElementById('customConfirmOk');
        
        if (!overlay || !messageEl || !cancelBtn || !okBtn) {
          console.error('自定义确认对话框元素未找到');
          resolve(false);
          return;
        }
        
        // 设置消息
        messageEl.textContent = message;
        
        // 显示确认框
        requestAnimationFrame(() => {
          overlay.classList.add('show');
        });
        
        // 关闭函数
        const closeConfirm = (result) => {
          overlay.classList.add('closing');
          
          // 等待动画完成后移除显示类
          setTimeout(() => {
            overlay.classList.remove('show', 'closing');
            cancelBtn.removeEventListener('click', handleCancel);
            okBtn.removeEventListener('click', handleOk);
            overlay.removeEventListener('click', overlayCloseConfirm);
            document.removeEventListener('keydown', escCloseConfirm);
            resolve(result);
          }, 250);
        };
        
        const handleCancel = () => closeConfirm(false);
        const handleOk = () => closeConfirm(true);
        
        const overlayCloseConfirm = (e) => {
          if (e.target === overlay) {
            closeConfirm(false);
          }
        };
        
        const escCloseConfirm = (e) => {
          if (e.key === 'Escape') {
            closeConfirm(false);
          } else if (e.key === 'Enter') {
            closeConfirm(true);
          }
        };
        
        // 绑定事件
        cancelBtn.addEventListener('click', handleCancel);
        okBtn.addEventListener('click', handleOk);
        overlay.addEventListener('click', overlayCloseConfirm);
        document.addEventListener('keydown', escCloseConfirm);
        
        // 聚焦到确定按钮
        setTimeout(() => {
          okBtn.focus();
        }, 100);
      });
    }



    // 日期输入相关函数
    function validateDateFormat(dateString) {
      // 检查基本格式 YYYY-MM-DD
      const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
      if (!dateRegex.test(dateString)) {
        return false;
      }
      
      // 检查是否是有效日期
      const date = new Date(dateString);
      const [year, month, day] = dateString.split('-').map(Number);
      
      return date.getFullYear() === year &&
             date.getMonth() === month - 1 &&
             date.getDate() === day;
    }
    
    // 格式化日期输入
    function formatDateInput(input) {
      let value = input.value.replace(/[^\d-]/g, ''); // 只保留数字和横线
      
      // 自动添加横线
      if (value.length >= 4 && value.indexOf('-') === -1) {
        value = value.slice(0, 4) + '-' + value.slice(4);
      }
      if (value.length >= 7 && value.lastIndexOf('-') === 4) {
        value = value.slice(0, 7) + '-' + value.slice(7);
      }
      
      // 限制长度
      if (value.length > 10) {
        value = value.slice(0, 10);
      }
      
      input.value = value;
      return value;
    }
    
    // 从输入框设置日期
    function setDateFromInput(dateString) {
      if (validateDateFormat(dateString)) {
        const date = new Date(dateString);
        selectDate(date);
        return true;
      }
      return false;
    }

    // 初始化自定义日期选择器
    function initCustomDatePicker() {
      const dateDisplay = document.getElementById('expirationDateDisplay');
      const calendar = document.getElementById('expirationDateCalendar');
      const hiddenInput = document.getElementById('expirationDate');
      const dateInputField = document.getElementById('dateInputField');
      
      if (!dateDisplay || !calendar || !hiddenInput || !dateInputField) {
        console.error('日期选择器元素未找到');
        return;
      }

      // 初始化按钮样式
      setTimeout(forceUpdateButtonStyles, 100);

      // 输入框事件处理
      dateInputField.addEventListener('input', function(e) {
        if (dateDisplay.classList.contains('disabled')) {
          return;
        }
        
        const formattedValue = formatDateInput(this);
        
        // 如果输入完整且有效，自动设置日期
        if (formattedValue.length === 10) {
          if (setDateFromInput(formattedValue)) {
            this.style.borderColor = '';
            this.style.color = '#374151';
          } else {
            this.style.borderColor = '#ef4444';
            this.style.color = '#ef4444';
          }
        } else {
          this.style.borderColor = '';
          this.style.color = '#374151';
        }
      });

      // 输入框失去焦点时验证
      dateInputField.addEventListener('blur', function(e) {
        if (dateDisplay.classList.contains('disabled')) {
          return;
        }
        
        const value = this.value.trim();
        if (value === '') {
          clearDate();
          this.style.borderColor = '';
          this.style.color = '#9ca3af';
        } else if (value.length === 10) {
          if (!setDateFromInput(value)) {
            this.style.borderColor = '#ef4444';
            this.style.color = '#ef4444';
            // 短暂显示错误状态后恢复
            setTimeout(() => {
              if (selectedDate) {
                updateDateDisplay();
              } else {
                this.value = '';
                this.style.borderColor = '';
                this.style.color = '#9ca3af';
              }
            }, 1500);
          }
        }
      });

      // 按Enter键时验证并关闭日历
      dateInputField.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          this.blur();
          closeCalendar();
        }
      });

      // 点击日历图标打开日期选择器
      const calendarIcon = dateDisplay.querySelector('.calendar-icon');
      if (calendarIcon) {
        calendarIcon.addEventListener('click', function(e) {
          e.stopPropagation();
          if (dateDisplay.classList.contains('disabled')) {
            return;
          }
          
          if (isCalendarOpen) {
            closeCalendar();
          } else {
            openCalendar();
          }
        });
      }

      // 点击输入框区域（但不是图标）时聚焦到输入框
      dateDisplay.addEventListener('click', function(e) {
        if (e.target === calendarIcon || e.target.closest('.calendar-icon')) {
          return; // 如果点击的是图标，由图标的事件处理器处理
        }
        
        e.stopPropagation();
        if (dateDisplay.classList.contains('disabled')) {
          return;
        }
        
        dateInputField.focus();
      });

      // 月份导航
      document.getElementById('prevMonth').addEventListener('click', function() {
        currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
        renderCalendar();
      });

      document.getElementById('nextMonth').addEventListener('click', function() {
        currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
        renderCalendar();
      });

      // 今天按钮
      document.getElementById('selectToday').addEventListener('click', function() {
        const today = new Date();
        selectDate(today);
        closeCalendar();
      });

      // 清除按钮
      document.getElementById('clearDate').addEventListener('click', function() {
        clearDate();
        closeCalendar();
      });

      // 点击外部关闭日历
      document.addEventListener('click', function(e) {
        if (!calendar.contains(e.target) && !dateDisplay.contains(e.target)) {
          closeCalendar();
        }
      });

      // 初始化显示
      renderCalendar();
    }

    // 打开日历
    function openCalendar() {
      const calendar = document.getElementById('expirationDateCalendar');
              requestAnimationFrame(() => {
          calendar.classList.add('show');
        });
      isCalendarOpen = true;
      
      // 如果有选中的日期，将日历导航到该月份
      if (selectedDate) {
        currentCalendarDate = new Date(selectedDate);
        renderCalendar();
      }
      
      // 多次确保按钮样式正确
      setTimeout(forceUpdateButtonStyles, 50);
      setTimeout(forceUpdateButtonStyles, 200);
      setTimeout(forceUpdateButtonStyles, 500);
    }
    
    // 强制底部按钮样式修复 - 只针对底部按钮
    function forceUpdateButtonStyles() {
      const clearBtn = document.getElementById('clearDate');
      const todayBtn = document.getElementById('selectToday');
      
      if (clearBtn && clearBtn.closest('.calendar-footer')) {
        // 彻底重置清除按钮样式 - 确保只是底部按钮
        clearBtn.style.cssText = `
          background: #f8fafc !important;
          background-color: #f8fafc !important;
          border: none !important;
          color: #6b7280 !important;
          padding: 10px 16px !important;
          border-radius: 8px !important;
          font-size: 0.875rem !important;
          font-weight: 500 !important;
          cursor: pointer !important;
          flex: 1 !important;
          outline: none !important;
          box-shadow: none !important;
          -webkit-appearance: none !important;
          -moz-appearance: none !important;
          appearance: none !important;
          min-height: 40px !important;
          text-align: center !important;
          line-height: 1.4 !important;
          display: block !important;
          visibility: visible !important;
          opacity: 1 !important;
          width: auto !important;
          height: auto !important;
          aspect-ratio: unset !important;
        `;
      }
      
      if (todayBtn && todayBtn.closest('.calendar-footer')) {
        // 彻底重置今天按钮样式 - 确保只是底部按钮
        todayBtn.style.cssText = `
          background: #3b82f6 !important;
          background-color: #3b82f6 !important;
          border: none !important;
          color: white !important;
          padding: 10px 16px !important;
          border-radius: 8px !important;
          font-size: 0.875rem !important;
          font-weight: 500 !important;
          cursor: pointer !important;
          flex: 1 !important;
          outline: none !important;
          box-shadow: none !important;
          -webkit-appearance: none !important;
          -moz-appearance: none !important;
          appearance: none !important;
          min-height: 40px !important;
          text-align: center !important;
          line-height: 1.4 !important;
          display: block !important;
          visibility: visible !important;
          opacity: 1 !important;
          width: auto !important;
          height: auto !important;
          aspect-ratio: unset !important;
        `;
      }
    }

    // 关闭日历
    function closeCalendar() {
      const calendar = document.getElementById('expirationDateCalendar');
      calendar.classList.remove('show');
      isCalendarOpen = false;
    }

    // 渲染日历
    function renderCalendar() {
      const monthYearElement = document.getElementById('monthYear');
      const calendarDaysElement = document.getElementById('calendarDays');
      
      if (!monthYearElement || !calendarDaysElement) {
        console.error('日历元素未找到');
        return;
      }

      // 设置月份年份显示
      const year = currentCalendarDate.getFullYear();
      const month = currentCalendarDate.getMonth();
      monthYearElement.textContent = `${year}年 ${monthNames[month]}`;

      // 清空日期网格
      calendarDaysElement.innerHTML = '';

      // 获取当前月份的第一天和最后一天
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const firstDayWeekday = firstDay.getDay();

      // 获取上个月的最后几天
      const prevMonthLastDay = new Date(year, month, 0).getDate();
      
      // 生成日期
      const today = new Date();
      const totalCells = 42; // 6周 × 7天

      for (let i = 0; i < totalCells; i++) {
        const dayButton = document.createElement('button');
        dayButton.type = 'button';
        dayButton.className = 'calendar-day';
        
        // 终极强制样式重置
        dayButton.style.cssText = `
          all: unset !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          width: 40px !important;
          height: 40px !important;
          min-height: 40px !important;
          background: transparent !important;
          background-color: transparent !important;
          background-image: none !important;
          border: none !important;
          border-width: 0 !important;
          border-style: none !important;
          outline: none !important;
          box-shadow: none !important;
          -webkit-box-shadow: none !important;
          -moz-box-shadow: none !important;
          border-radius: 8px !important;
          font-family: inherit !important;
          font-size: 0.875rem !important;
          font-weight: 500 !important;
          color: #374151 !important;
          cursor: pointer !important;
          transition: all 0.2s ease !important;
          position: relative !important;
          margin: 0 !important;
          padding: 0 !important;
          text-decoration: none !important;
          user-select: none !important;
          box-sizing: border-box !important;
          -webkit-appearance: none !important;
          -moz-appearance: none !important;
          appearance: none !important;
          -webkit-tap-highlight-color: transparent !important;
          -webkit-touch-callout: none !important;
          line-height: 1 !important;
        `;

        let dayNumber, cellDate, isCurrentMonth = false;

        if (i < firstDayWeekday) {
          // 上个月的日期
          dayNumber = prevMonthLastDay - firstDayWeekday + i + 1;
          cellDate = new Date(year, month - 1, dayNumber);
          dayButton.classList.add('other-month');
        } else if (i < firstDayWeekday + lastDay.getDate()) {
          // 当前月的日期
          dayNumber = i - firstDayWeekday + 1;
          cellDate = new Date(year, month, dayNumber);
          isCurrentMonth = true;
        } else {
          // 下个月的日期
          dayNumber = i - firstDayWeekday - lastDay.getDate() + 1;
          cellDate = new Date(year, month + 1, dayNumber);
          dayButton.classList.add('other-month');
        }

        dayButton.textContent = dayNumber;
        dayButton.setAttribute('data-date', formatDateToString(cellDate));

        // 标记今天
        if (isCurrentMonth && 
            cellDate.getDate() === today.getDate() && 
            cellDate.getMonth() === today.getMonth() && 
            cellDate.getFullYear() === today.getFullYear()) {
          dayButton.classList.add('today');
        }

        // 标记选中的日期
        if (selectedDate && 
            cellDate.getDate() === selectedDate.getDate() && 
            cellDate.getMonth() === selectedDate.getMonth() && 
            cellDate.getFullYear() === selectedDate.getFullYear()) {
          dayButton.classList.add('selected');
        }

        // 添加点击事件
        dayButton.addEventListener('click', function() {
          selectDate(cellDate);
          closeCalendar();
        });
        
        // 添加悬停事件
        dayButton.addEventListener('mouseenter', function() {
          this.style.setProperty('background', 'rgba(59, 130, 246, 0.1)', 'important');
          this.style.setProperty('background-color', 'rgba(59, 130, 246, 0.1)', 'important');
          this.style.setProperty('color', '#1d4ed8', 'important');
        });
        
        dayButton.addEventListener('mouseleave', function() {
          this.style.setProperty('background', 'transparent', 'important');
          this.style.setProperty('background-color', 'transparent', 'important');
          this.style.setProperty('color', '#374151', 'important');
        });

        calendarDaysElement.appendChild(dayButton);
      }
      
      // 确保按钮样式
      setTimeout(forceUpdateButtonStyles, 10);
      
      // 终极强制确保所有日期按钮样式正确
      setTimeout(() => {
        const dateButtons = document.querySelectorAll('.calendar-days button, .calendar-days .calendar-day');
        dateButtons.forEach(btn => {
          if (!btn.closest('.calendar-footer')) {
            // 完全重置样式
            btn.style.cssText = `
              all: unset !important;
              display: flex !important;
              align-items: center !important;
              justify-content: center !important;
              width: 40px !important;
              height: 40px !important;
              min-height: 40px !important;
              background: transparent !important;
              background-color: transparent !important;
              background-image: none !important;
              border: none !important;
              border-width: 0 !important;
              border-style: none !important;
              outline: none !important;
              box-shadow: none !important;
              -webkit-box-shadow: none !important;
              -moz-box-shadow: none !important;
              border-radius: 8px !important;
              font-family: inherit !important;
              font-size: 0.875rem !important;
              font-weight: 500 !important;
              color: #374151 !important;
              cursor: pointer !important;
              transition: all 0.2s ease !important;
              position: relative !important;
              margin: 0 !important;
              padding: 0 !important;
              text-decoration: none !important;
              user-select: none !important;
              box-sizing: border-box !important;
              -webkit-appearance: none !important;
              -moz-appearance: none !important;
              appearance: none !important;
              -webkit-tap-highlight-color: transparent !important;
              -webkit-touch-callout: none !important;
              line-height: 1 !important;
            `;
          }
        });
      }, 50);
      
      // 添加DOM观察器来强制应用日期按钮样式
      setTimeout(() => {
        const calendarContainer = document.querySelector('.calendar-days');
        if (calendarContainer) {
          const observer = new MutationObserver(() => {
            const dateButtons = calendarContainer.querySelectorAll('button');
            dateButtons.forEach(btn => {
              if (!btn.closest('.calendar-footer')) {
                btn.style.cssText = `
                  all: unset !important;
                  display: flex !important;
                  align-items: center !important;
                  justify-content: center !important;
                  width: 40px !important;
                  height: 40px !important;
                  background: transparent !important;
                  background-color: transparent !important;
                  border: none !important;
                  outline: none !important;
                  box-shadow: none !important;
                  border-radius: 8px !important;
                  font-family: inherit !important;
                  font-size: 0.875rem !important;
                  font-weight: 500 !important;
                  color: #374151 !important;
                                     cursor: pointer !important;
                   transition: all 0.2s ease !important;
                   text-align: center !important;
                   line-height: 1 !important;
                 `;
                 
                 // 确保悬停事件能正常工作
                 btn.addEventListener('mouseenter', function() {
                   if (!this.closest('.calendar-footer')) {
                     this.style.setProperty('background', 'rgba(59, 130, 246, 0.1)', 'important');
                     this.style.setProperty('background-color', 'rgba(59, 130, 246, 0.1)', 'important');
                     this.style.setProperty('color', '#1d4ed8', 'important');
                   }
                 });
                 
                 btn.addEventListener('mouseleave', function() {
                   if (!this.closest('.calendar-footer')) {
                     this.style.setProperty('background', 'transparent', 'important');
                     this.style.setProperty('background-color', 'transparent', 'important');
                     this.style.setProperty('color', '#374151', 'important');
                   }
                 });
               }
             });
           });
           observer.observe(calendarContainer, { childList: true, subtree: true });
         }
       }, 100);
    }

    // 选择日期
    function selectDate(date) {
      selectedDate = new Date(date);
      const dateString = formatDateToString(selectedDate);
      
      // 更新隐藏输入框
      const hiddenInput = document.getElementById('expirationDate');
      hiddenInput.value = dateString;

      // 更新显示
      updateDateDisplay();

      // 触发计算
      calculateValues();
    }

    // 清除日期
    function clearDate() {
      selectedDate = null;
      const hiddenInput = document.getElementById('expirationDate');
      hiddenInput.value = '';
      updateDateDisplay();
      calculateValues();
    }

    // 更新日期显示
    function updateDateDisplay() {
      const dateInputField = document.getElementById('dateInputField');
      if (!dateInputField) {
        console.error('日期输入框元素未找到');
        return;
      }

      if (selectedDate) {
        const year = selectedDate.getFullYear();
        const month = String(selectedDate.getMonth() + 1).padStart(2, '0');
        const day = String(selectedDate.getDate()).padStart(2, '0');
        dateInputField.value = `${year}-${month}-${day}`;
        dateInputField.style.color = '#374151';
      } else {
        dateInputField.value = '';
        dateInputField.style.color = '#9ca3af';
      }
    }

    // 设置日期选择器的禁用状态
    function setDatePickerDisabled(disabled) {
      const dateDisplay = document.getElementById('expirationDateDisplay');
      const dateInputField = document.getElementById('dateInputField');
      
      if (dateDisplay && dateInputField) {
        if (disabled) {
          dateDisplay.classList.add('disabled');
          dateDisplay.style.background = 'rgba(156, 163, 175, 0.3)';
          dateDisplay.style.cursor = 'not-allowed';
          dateInputField.disabled = true;
          dateInputField.placeholder = '永久服务器无到期日期';
          dateInputField.value = '';
        } else {
          dateDisplay.classList.remove('disabled');
          dateDisplay.style.background = '#ffffff';
          dateDisplay.style.cursor = 'pointer';
          dateInputField.disabled = false;
          dateInputField.placeholder = 'YYYY-MM-DD 或点击日历选择';
          if (!selectedDate) {
            dateInputField.value = '';
          }
        }
      }
    }
    
    // 页面加载时获取服务器列表
    document.addEventListener('DOMContentLoaded', function() {
      // 初始化自定义下拉框
      initCustomSelects();
      
      // 初始化自定义日期选择器
      initCustomDatePicker();
      
      // 清理过期的汇率缓存
      cleanExpiredCache();
      
      // 强制设置只读输入框样式，防止颜色变化
      const readonlyInputs = ['remainingValueDisplay', 'premiumValueDisplay'];
      readonlyInputs.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
          // 验证readonly属性
          if (!element.hasAttribute('readonly')) {
            element.setAttribute('readonly', true);
          }
          
          // 强制应用样式
          element.style.setProperty('background', 'rgba(243, 244, 246, 0.8)', 'important');
          element.style.setProperty('cursor', 'not-allowed', 'important');
          element.style.setProperty('color', '#6b7280', 'important');
          element.style.setProperty('border-color', 'rgba(229, 231, 235, 0.3)', 'important');
          element.style.setProperty('transition', 'none', 'important');
          element.style.setProperty('backdrop-filter', 'none', 'important');
          element.style.setProperty('-webkit-backdrop-filter', 'none', 'important');
        }
      });
      
      // 强制设置计算详情容器样式，防止颜色变化
      const calculationDetails = document.querySelector('.calculation-details');
      if (calculationDetails) {
        calculationDetails.style.setProperty('background', 'rgba(248, 250, 252, 0.95)', 'important');
        calculationDetails.style.setProperty('border-radius', '10px', 'important');
        calculationDetails.style.setProperty('padding', '18px', 'important');
        calculationDetails.style.setProperty('backdrop-filter', 'none', 'important');
        calculationDetails.style.setProperty('-webkit-backdrop-filter', 'none', 'important');
        calculationDetails.style.setProperty('border', '1px solid rgba(226, 232, 240, 0.6)', 'important');
        calculationDetails.style.setProperty('transition', 'none', 'important');
        calculationDetails.style.setProperty('margin-top', '4px', 'important');
      }
      
      // 加载服务器列表
      loadServers();
      
      // 多次修复按钮样式确保生效
      setTimeout(forceUpdateButtonStyles, 100);
      setTimeout(forceUpdateButtonStyles, 500);
      setTimeout(forceUpdateButtonStyles, 1000);
      setTimeout(forceUpdateButtonStyles, 2000);
      
      console.log(`📅 系统初始化完成 - 当前日期: ${getCurrentDateString()}`);
    });
    
    // 加载服务器列表
    async function loadServers() {
      try {
        // 对于管理页面，服务器列表也需要认证访问
        const token = localStorage.getItem('sessionToken');
        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};
        
        const response = await fetch(`${API_BASE}/servers`, {
          headers: headers
        });
        const result = await response.json();
        
        if (result.success) {
          renderServersTable(result.data);
        } else {
          console.error('加载服务器列表失败:', result.message);
        }
      } catch (error) {
        console.error('网络错误:', error);
      }
    }
    
    // 格式化价格显示
    function formatPrice(price) {
      if (!price || price === '' || price === null || price === undefined) {
        return '¥0.00';
      }
      
      // 如果价格已经包含货币符号，直接返回
      if (typeof price === 'string' && (price.includes('¥') || price.includes('$') || price.includes('€'))) {
        return price;
      }
      
      // 转换为数字并格式化
      const numPrice = parseFloat(price);
      if (isNaN(numPrice)) {
        return '¥0.00';
      }
      
      return `¥${numPrice.toFixed(2)}`;
    }

    // 渲染服务器列表 - 简约扁平化样式
    function renderServersTable(servers) {
      const container = document.getElementById('serversContainer');
      const serversList = document.querySelector('.servers-list');
      const emptyState = document.getElementById('emptyState');
      
      container.innerHTML = '';
      
      // 如果没有服务器数据，显示空状态提示
      if (!servers || servers.length === 0) {
        if (serversList) {
          serversList.style.display = 'none';
        }
        if (emptyState) {
          emptyState.style.display = 'block';
        }
        return;
      }
      
      // 有服务器数据时显示服务器列表，隐藏空状态提示
      if (serversList) {
        serversList.style.display = 'block';
      }
      if (emptyState) {
        emptyState.style.display = 'none';
      }
      
      servers.forEach((server, index) => {
        const serverItem = document.createElement('div');
        serverItem.className = 'server-item';
        
        // 全透明背景样式 + 延时动画
        serverItem.style.cssText = `
          background: transparent;
          border-radius: 12px;
          padding: 16px 18px;
          margin-bottom: 16px;
          transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
          animation-delay: ${index * 0.05}s;
        `;
        
        const isMobile = window.innerWidth <= 768;
        const gridColumns = isMobile ? '1fr' : '1fr 80px 1.3fr 1.2fr 80px 120px 160px';
        const gridGap = isMobile ? '12px' : '10px';
        
        // 构建续费信息显示
        let renewalInfo = '未设置';
        if (server.renewalPrice) {
          if (server.renewalCycle) {
            renewalInfo = `${server.renewalPrice}/${server.renewalCycle}`;
          } else {
            renewalInfo = server.renewalPrice + ' (未指定周期)';
          }
        }
        
        serverItem.innerHTML = `
          <div style="display: grid; grid-template-columns: ${gridColumns}; gap: ${gridGap}; align-items: center; width: 100%; box-sizing: border-box;">
            <div style="font-size: 0.875rem; color: #1f2937; font-weight: 600; text-align: center;">
              ${server.merchant}
            </div>
            <div style="font-size: 0.875rem; color: #6b7280; font-weight: 500; text-align: center;">
              <span style="color: #374151; font-size: 0.75rem; font-weight: 600;">${server.serverType}</span>
            </div>
            <div style="font-size: 0.875rem; color: #6b7280; font-weight: 500; text-align: center;">
              <span style="font-family: monospace; font-size: 0.8125rem;">${server.cpu} / ${server.memory} / ${server.storage}</span>
            </div>
            <div style="font-size: 0.875rem; text-align: center;">
              <div style="color: #10b981; font-weight: 600; margin-bottom: 2px;">
                售价: ${server.salePrice || '¥0.00'}
              </div>
              <div style="color: #6b7280; font-size: 0.75rem; font-weight: 500;">
                续费: ${renewalInfo}
              </div>
            </div>
            <div style="font-size: 0.875rem; color: #6b7280; font-weight: 500; text-align: center;">
              <span style="font-size: 0.75rem; font-weight: 600; ${server.status === '出售' ? 'color: #10b981;' : 'color: #9ca3af;'}">${server.status}</span>
            </div>
            <div style="font-size: 0.875rem; color: #6b7280; font-weight: 500; text-align: center;">
              ${server.expirationDate}
            </div>
            <div style="font-size: 0.875rem; color: #6b7280; font-weight: 500; text-align: center;">
              <div style="display: flex; gap: 8px; justify-content: center; align-items: center; ${isMobile ? 'flex-direction: column;' : ''}">
                <button onclick="editServer(${server.id})" style="padding: 8px 14px; border: none; border-radius: 8px; font-size: 0.8125rem; cursor: pointer; transition: all 0.2s ease; font-weight: 500; min-width: 60px; text-align: center; background: #3b82f6; color: white; ${isMobile ? 'width: 100%;' : ''}" onmouseover="this.style.background='#2563eb';" onmouseout="this.style.background='#3b82f6';">编辑</button>
                <button onclick="deleteServer(${server.id})" style="padding: 8px 14px; border: none; border-radius: 8px; font-size: 0.8125rem; cursor: pointer; transition: all 0.2s ease; font-weight: 500; min-width: 60px; text-align: center; background: #ef4444; color: white; ${isMobile ? 'width: 100%;' : ''}" onmouseover="this.style.background='#dc2626';" onmouseout="this.style.background='#ef4444';">删除</button>
              </div>
            </div>
          </div>
        `;
        
        // 透明背景悬停效果
        serverItem.addEventListener('mouseenter', function() {
          this.style.background = 'rgba(255, 255, 255, 0.1)';
          this.style.transform = 'translateY(-2px)';
        });
        
        serverItem.addEventListener('mouseleave', function() {
          this.style.background = 'transparent';
          this.style.transform = 'translateY(0)';
        });
        
        container.appendChild(serverItem);
      });
    }
    
    // 打开添加弹窗
    function openAddModal() {
      currentEditId = null;
      
      const modalTitle = document.getElementById('modalTitle');
      const submitBtn = document.getElementById('submitBtn');
      const serverForm = document.getElementById('serverForm');
      const serverModal = document.getElementById('serverModal');
      
      if (!modalTitle || !submitBtn || !serverForm || !serverModal) {
        console.error('添加弹窗元素未找到:', { 
          modalTitle: !!modalTitle, 
          submitBtn: !!submitBtn, 
          serverForm: !!serverForm, 
          serverModal: !!serverModal 
        });
        showCustomAlert('页面元素未正确加载，请刷新页面后重试', 'error');
        return;
      }
      
      modalTitle.textContent = '添加服务器';
      submitBtn.textContent = '添加服务器';
      serverForm.reset();
      
      // 重置自定义日期选择器
      selectedDate = null;
      updateDateDisplay();
      setDatePickerDisabled(false);
      
      // 重置自定义下拉框到默认值
      setTimeout(() => {
        setCustomSelectValue('salePriceCurrencySelect', 'CNY');
        setCustomSelectValue('renewalPriceCurrencySelect', '');
        setCustomSelectValue('serverTypeSelect', '独服');
        setCustomSelectValue('renewalCycleSelect', '');
        setCustomSelectValue('statusSelect', '出售');
        setCustomSelectValue('countryCodeSelect', '');
        // 设置默认顺序ID为1
        const sortOrderInput = document.getElementById('sortOrder');
        if (sortOrderInput) {
          sortOrderInput.value = '1';
        }
      }, 10);
      
      serverModal.classList.remove('closing');
      
      // 使用requestAnimationFrame确保动画流畅
      requestAnimationFrame(() => {
        serverModal.classList.add('show');
      });
      
      // 修复按钮样式
      setTimeout(forceUpdateButtonStyles, 100);
      setTimeout(forceUpdateButtonStyles, 300);
      setTimeout(forceUpdateButtonStyles, 600);
      
      // 强制同步状态显示
      setTimeout(() => {
        syncStatusDisplay();
      }, 200);
    }
    
    // 将函数绑定到全局作用域
    window.openAddModal = openAddModal;
    
    // 编辑服务器
    async function editServer(id) {
      try {
        // 检查必要的DOM元素是否存在
        const modalTitle = document.getElementById('modalTitle');
        const submitBtn = document.getElementById('submitBtn');
        
        if (!modalTitle || !submitBtn) {
          console.error('模态框元素未找到:', { modalTitle: !!modalTitle, submitBtn: !!submitBtn });
          showCustomAlert('页面元素未正确加载，请刷新页面后重试', 'error');
          return;
        }
        
        const token = localStorage.getItem('sessionToken');
        const response = await fetch(`${API_BASE}/servers/${id}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        const result = await response.json();
        
        if (result.success) {
          currentEditId = id;
          modalTitle.textContent = '编辑服务器';
          submitBtn.textContent = '更新服务器';
          
          // 填充表单
          const server = result.data;
          
          // 安全地设置表单字段值
          const setInputValue = (id, value) => {
            const element = document.getElementById(id);
            if (element) {
              element.value = value || '';
            } else {
              console.warn(`表单元素未找到: ${id}`);
            }
          };
          
          setInputValue('merchant', server.merchant);
          setCustomSelectValue('serverTypeSelect', server.serverType || '独服');
          setInputValue('cpu', server.cpu);
          setInputValue('memory', server.memory);
          setInputValue('storage', server.storage);
          setInputValue('traffic', server.traffic);
          
          // 处理国家代码
          const countryCode = server.countryCode || 'cn';
          // 直接设置国家代码，不再需要customCountry处理
          try {
            setCustomSelectValue('countryCodeSelect', countryCode);
            const countryCodeInput = document.getElementById('countryCode');
            if (countryCodeInput) {
              countryCodeInput.value = countryCode;
            }
          } catch (error) {
            console.warn('设置国家代码时出现问题:', error);
            // 如果设置失败，使用默认值
            setCustomSelectValue('countryCodeSelect', 'cn');
            const countryCodeInput = document.getElementById('countryCode');
            if (countryCodeInput) {
              countryCodeInput.value = 'cn';
            }
          }
          
          // 处理出售价格 - 分离数字和货币
          if (server.salePrice) {
            const { currency: saleCurrency, amount: saleAmount } = detectCurrency(server.salePrice);
            setInputValue('salePriceAmount', saleAmount);
            setCustomSelectValue('salePriceCurrencySelect', saleCurrency || 'CNY');
            setInputValue('salePrice', server.salePrice);
          } else {
            setInputValue('salePriceAmount', '');
            setCustomSelectValue('salePriceCurrencySelect', 'CNY');
            setInputValue('salePrice', '');
          }
          
          // 处理续费价格 - 分离数字和货币
          if (server.renewalPrice) {
            const { currency, amount } = detectCurrency(server.renewalPrice);
            setInputValue('renewalPriceAmount', amount);
            setCustomSelectValue('renewalPriceCurrencySelect', currency || '');
            setInputValue('renewalPrice', server.renewalPrice);
          } else {
            setInputValue('renewalPriceAmount', '');
            setCustomSelectValue('renewalPriceCurrencySelect', '');
            setInputValue('renewalPrice', '');
          }
          
          setCustomSelectValue('renewalCycleSelect', server.renewalCycle || '');

          setInputValue('remainingValue', server.remainingValue);
          setInputValue('remainingValueDisplay', server.remainingValue);
          setInputValue('premiumValue', server.premiumValue);
          setInputValue('premiumValueDisplay', server.premiumValue);
          // 设置到期日期
          if (server.expirationDate) {
            const expirationDate = new Date(server.expirationDate);
            selectedDate = expirationDate;
          setInputValue('expirationDate', server.expirationDate);
            updateDateDisplay();
          } else {
            selectedDate = null;
            setInputValue('expirationDate', '');
            updateDateDisplay();
          }
          
          // 如果是永久服务器，需要禁用到期日期选择器
          if (server.renewalCycle === '永久') {
            setDatePickerDisabled(true);
          } else {
            setDatePickerDisabled(false);
          }
          setCustomSelectValue('statusSelect', server.status || '出售');
          setInputValue('statusChangedDate', server.statusChangedDate);
          
          // 处理已售状态详细设置
          const soldStatusDetails = document.getElementById('soldStatusDetails');
          const soldDateInput = document.getElementById('soldDate');
          const soldExchangeRateInput = document.getElementById('soldExchangeRate');
          
          // 强制检查状态：只有当状态确实是"已售"时才显示已售信息
          console.log('🔍 编辑服务器状态检查:', server.status);
          
          if (server.status === '已售') {
            // 显示已售状态详细设置
            if (soldStatusDetails) {
              soldStatusDetails.style.display = 'block';
              console.log('✅ 显示已售信息 - 状态为已售');
            }
            
            // 设置已售日期
            if (soldDateInput && server.statusChangedDate) {
              soldDateInput.value = server.statusChangedDate;
            }
            
            // 设置已售汇率 - 检查是否有保存的汇率数据
            if (soldExchangeRateInput) {
              if (server.soldExchangeRates && typeof server.soldExchangeRates === 'object') {
                // 使用保存的汇率数据
                const soldRates = server.soldExchangeRates;
                let rateToUse = null;
                
                // 检查是否为自定义汇率格式（所有主要货币都有相同汇率值）
                if (soldRates.USD && soldRates.EUR && soldRates.GBP && soldRates.JPY) {
                  // 使用USD汇率作为显示值（因为保存时所有货币汇率相同）
                  rateToUse = soldRates.USD;
                  console.log('🔒 已恢复自定义汇率:', rateToUse);
                } else if (soldRates.sale && soldRates.sale.toCNY) {
                  // 旧格式：使用销售汇率
                  rateToUse = soldRates.sale.toCNY;
                  console.log('🔒 已恢复保存的销售汇率:', rateToUse);
                } else if (soldRates.renewal && soldRates.renewal.toCNY) {
                  // 旧格式：使用续费汇率
                  rateToUse = soldRates.renewal.toCNY;
                  console.log('🔒 已恢复保存的续费汇率:', rateToUse);
                }
                
                if (rateToUse && rateToUse > 0) {
                  soldExchangeRateInput.value = rateToUse.toFixed(4);
                } else {
                  // 如果没有有效汇率，获取当天汇率
                  setTimeout(() => setCurrentExchangeRate(), 100);
                }
              } else {
                // 如果没有保存的汇率，获取当天汇率
                setTimeout(() => setCurrentExchangeRate(), 100);
              }
            }
          } else {
            // 强制隐藏已售状态详细设置 - 状态不是已售
            if (soldStatusDetails) {
              soldStatusDetails.style.display = 'none';
              console.log('❌ 隐藏已售信息 - 状态为:', server.status);
            }
            
            // 清除已售日期和汇率
            if (soldDateInput) {
              soldDateInput.value = '';
            }
            if (soldExchangeRateInput) {
              soldExchangeRateInput.value = '';
            }
          }
          
          // 处理已售时汇率数据
          if (server.soldExchangeRates && typeof server.soldExchangeRates === 'object') {
            setInputValue('soldExchangeRates', JSON.stringify(server.soldExchangeRates));
            console.log('🔒 已恢复汇率锁定数据:', server.soldExchangeRates);
          } else {
            setInputValue('soldExchangeRates', '');
          }
          setInputValue('telegramLink', server.telegramLink);
          setInputValue('nodeseekLink', server.nodeseekLink);
          setInputValue('sortOrder', server.sortOrder);
          setInputValue('tags', server.tags ? server.tags.join(', ') : '');
          
          // 处理相关链接
          if (server.relatedLinks && server.relatedLinks.length > 0) {
            const linksText = server.relatedLinks.map(link => `${link.name}|${link.url}`).join('\n');
            setInputValue('relatedLinks', linksText);
          } else {
            setInputValue('relatedLinks', '');
          }
          
          const serverModal = document.getElementById('serverModal');
          if (serverModal) {
            serverModal.classList.remove('closing');
            
            // 使用requestAnimationFrame确保动画流畅
            requestAnimationFrame(() => {
              serverModal.classList.add('show');
            });
            
            // 打开modal后同步状态显示
            setTimeout(() => {
              syncStatusDisplay();
            }, 100);
          } else {
            console.error('服务器模态框元素未找到');
            showCustomAlert('模态框无法打开，请刷新页面后重试', 'error');
            return;
          }
          
          // 编辑时自动计算剩余价值和溢价
          setTimeout(() => {
            calculateValues();
          }, 100);
          
          // 更新按钮样式
          setTimeout(forceUpdateButtonStyles, 200);
          
          // 强制同步状态显示
          setTimeout(() => {
            syncStatusDisplay();
          }, 250);
        }
      } catch (error) {
        console.error('获取服务器详情失败:', error);
      }
    }
    
    // 将editServer函数绑定到全局作用域
    window.editServer = editServer;
    
    // 删除服务器
    async function deleteServer(id) {
      const confirmed = await showCustomConfirm('确定要删除这台服务器吗？');
      if (!confirmed) {
        return;
      }
      
      try {
        const token = localStorage.getItem('sessionToken');
        const response = await fetch(`${API_BASE}/servers/${id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        const result = await response.json();
        
        if (result.success) {
          showCustomAlert('服务器删除成功！', 'success');
          loadServers();
        } else {
          showCustomAlert('删除失败: ' + result.message, 'error');
        }
      } catch (error) {
        console.error('删除服务器失败:', error);
        showCustomAlert('网络错误，删除失败', 'error');
      }
    }
    
    // 将deleteServer函数绑定到全局作用域
    window.deleteServer = deleteServer;
    
    // 关闭弹窗
    function closeModal() {
      const serverModal = document.getElementById('serverModal');
      if (serverModal) {
        serverModal.classList.add('closing');
        
        // 等待动画完成后移除显示类
        setTimeout(() => {
          serverModal.classList.remove('show', 'closing');
        }, 300);
      } else {
        console.warn('服务器模态框元素未找到');
      }
    }
    
    // 将closeModal函数绑定到全局作用域
    window.closeModal = closeModal;
    
    // 处理国家选择变化
    function handleCountryChange(select) {
      // 国家选择变化时的处理逻辑（如果需要的话）
      console.log('国家选择已更改:', select.value);
    }
    
    // 将handleCountryChange函数绑定到全局作用域
    window.handleCountryChange = handleCountryChange;
    
    // 处理续费周期变化
    function handleRenewalCycleChange() {
      const renewalCycleInput = document.getElementById('renewalCycle');
      
      if (!renewalCycleInput) {
        console.warn('续费周期元素未找到');
        return;
      }
      
      const renewalCycle = renewalCycleInput.value;
      
      if (renewalCycle === '永久') {
        // 永久服务器：禁用到期日期选择器并清空日期
        setDatePickerDisabled(true);
        clearDate();
      } else {
        // 非永久服务器：启用到期日期选择器
        setDatePickerDisabled(false);
      }
      
      // 重新计算价值
      calculateValues();
    }
    
    // 将handleRenewalCycleChange函数绑定到全局作用域
    window.handleRenewalCycleChange = handleRenewalCycleChange;
    
    // 货币符号映射表
    const currencySymbols = {
      // 主要货币符号
      '$': 'USD',     // 美元 (默认$为美元)
      '€': 'EUR',     // 欧元
      '£': 'GBP',     // 英镑
      '¥': 'CNY',     // 人民币/日元 (需要进一步判断)
      '₹': 'INR',     // 印度卢比
      '₩': 'KRW',     // 韩元
      '₽': 'RUB',     // 俄罗斯卢布
      '₦': 'NGN',     // 尼日利亚奈拉
      '₨': 'PKR',     // 巴基斯坦卢比
      '₪': 'ILS',     // 以色列新谢克尔
      '₫': 'VND',     // 越南盾
      '₡': 'CRC',     // 哥斯达黎加科朗
      '₲': 'PYG',     // 巴拉圭瓜拉尼
      '₴': 'UAH',     // 乌克兰格里夫纳
      '₸': 'KZT',     // 哈萨克斯坦坚戈
      '₼': 'AZN',     // 阿塞拜疆马纳特
      '₾': 'GEL',     // 格鲁吉亚拉里
      '＄': 'USD',    // 全角美元符号
      // 特殊前缀
      'US$': 'USD',   // 美元
      'A$': 'AUD',    // 澳元
      'C$': 'CAD',    // 加元
      'HK$': 'HKD',   // 港币
      'S$': 'SGD',    // 新加坡元
      'NZ$': 'NZD',   // 新西兰元
      'CA$': 'CAD',   // 加元
      'AU$': 'AUD',   // 澳元
      'SGD$': 'SGD',  // 新加坡元
      'HKD$': 'HKD',  // 港币
      'CHF': 'CHF',   // 瑞士法郎
      'SEK': 'SEK',   // 瑞典克朗
      'NOK': 'NOK',   // 挪威克朗
      'DKK': 'DKK',   // 丹麦克朗
      'PLN': 'PLN',   // 波兰兹罗提
      'CZK': 'CZK',   // 捷克克朗
      'HUF': 'HUF',   // 匈牙利福林
      'RON': 'RON',   // 罗马尼亚列伊
      'BGN': 'BGN',   // 保加利亚列弗
      'HRK': 'HRK',   // 克罗地亚库纳
      'RSD': 'RSD',   // 塞尔维亚第纳尔
      'BAM': 'BAM',   // 波黑马克
      'MKD': 'MKD',   // 北马其顿第纳尔
      'ALL': 'ALL',   // 阿尔巴尼亚列克
      'MDL': 'MDL',   // 摩尔多瓦列伊
      'BYN': 'BYN',   // 白俄罗斯卢布
      'RUB': 'RUB',   // 俄罗斯卢布
      'TRY': 'TRY',   // 土耳其里拉
      'BRL': 'BRL',   // 巴西雷亚尔
      'MXN': 'MXN',   // 墨西哥比索
      'ARS': 'ARS',   // 阿根廷比索
      'CLP': 'CLP',   // 智利比索
      'COP': 'COP',   // 哥伦比亚比索
      'PEN': 'PEN',   // 秘鲁索尔
      'UYU': 'UYU',   // 乌拉圭比索
      'BOB': 'BOB',   // 玻利维亚诺
      'VES': 'VES',   // 委内瑞拉玻利瓦尔
      'ZAR': 'ZAR',   // 南非兰特
      'EGP': 'EGP',   // 埃及镑
      'MAD': 'MAD',   // 摩洛哥迪拉姆
      'TND': 'TND',   // 突尼斯第纳尔
      'DZD': 'DZD',   // 阿尔及利亚第纳尔
      'LYD': 'LYD',   // 利比亚第纳尔
      'SDG': 'SDG',   // 苏丹镑
      'ETB': 'ETB',   // 埃塞俄比亚比尔
      'KES': 'KES',   // 肯尼亚先令
      'UGX': 'UGX',   // 乌干达先令
      'TZS': 'TZS',   // 坦桑尼亚先令
      'RWF': 'RWF',   // 卢旺达法郎
      'BIF': 'BIF',   // 布隆迪法郎
      'DJF': 'DJF',   // 吉布提法郎
      'SOS': 'SOS',   // 索马里先令
      'ERN': 'ERN',   // 厄立特里亚纳克法
      'MWK': 'MWK',   // 马拉维克瓦查
      'ZMW': 'ZMW',   // 赞比亚克瓦查
      'BWP': 'BWP',   // 博茨瓦纳普拉
      'SZL': 'SZL',   // 斯威士兰里兰吉尼
      'LSL': 'LSL',   // 莱索托洛蒂
      'NAD': 'NAD',   // 纳米比亚元
      'MZN': 'MZN',   // 莫桑比克梅蒂卡尔
      'AOA': 'AOA',   // 安哥拉宽扎
      'XAF': 'XAF',   // 中非法郎
      'XOF': 'XOF',   // 西非法郎
      'GMD': 'GMD',   // 冈比亚达拉西
      'GHS': 'GHS',   // 加纳塞地
      'SLE': 'SLE',   // 塞拉利昂利昂
      'LRD': 'LRD',   // 利比里亚元
      'CIV': 'XOF',   // 科特迪瓦使用西非法郎
      'BFA': 'XOF',   // 布基纳法索使用西非法郎
      'MLI': 'XOF',   // 马里使用西非法郎
      'NER': 'XOF',   // 尼日尔使用西非法郎
      'SEN': 'XOF',   // 塞内加尔使用西非法郎
      'TGO': 'XOF',   // 多哥使用西非法郎
      'BEN': 'XOF',   // 贝宁使用西非法郎
      'GIN': 'GNF',   // 几内亚法郎
      'THB': 'THB',   // 泰铢
      'VND': 'VND',   // 越南盾
      'LAK': 'LAK',   // 老挝基普
      'KHR': 'KHR',   // 柬埔寨瑞尔
      'MMK': 'MMK',   // 缅甸缅元
      'IDR': 'IDR',   // 印度尼西亚盾
      'MYR': 'MYR',   // 马来西亚林吉特
      'PHP': 'PHP',   // 菲律宾比索
      'BND': 'BND',   // 文莱元
      'LKR': 'LKR',   // 斯里兰卡卢比
      'MVR': 'MVR',   // 马尔代夫拉菲亚
      'NPR': 'NPR',   // 尼泊尔卢比
      'BTN': 'BTN',   // 不丹努尔特鲁姆
      'BDT': 'BDT',   // 孟加拉塔卡
      'AFN': 'AFN',   // 阿富汗阿富汗尼
      'IRR': 'IRR',   // 伊朗里亚尔
      'IQD': 'IQD',   // 伊拉克第纳尔
      'JOD': 'JOD',   // 约旦第纳尔
      'LBP': 'LBP',   // 黎巴嫩镑
      'SYP': 'SYP',   // 叙利亚镑
      'AED': 'AED',   // 阿联酋迪拉姆
      'SAR': 'SAR',   // 沙特里亚尔
      'QAR': 'QAR',   // 卡塔尔里亚尔
      'BHD': 'BHD',   // 巴林第纳尔
      'KWD': 'KWD',   // 科威特第纳尔
      'OMR': 'OMR',   // 阿曼里亚尔
      'YER': 'YER',   // 也门里亚尔
      'GEL': 'GEL',   // 格鲁吉亚拉里
      'AMD': 'AMD',   // 亚美尼亚德拉姆
      'AZN': 'AZN',   // 阿塞拜疆马纳特
      'KZT': 'KZT',   // 哈萨克斯坦坚戈
      'KGS': 'KGS',   // 吉尔吉斯斯坦索姆
      'TJS': 'TJS',   // 塔吉克斯坦索莫尼
      'TMT': 'TMT',   // 土库曼斯坦马纳特
      'UZS': 'UZS',   // 乌兹别克斯坦苏姆
      'MNT': 'MNT',   // 蒙古图格里克
      'CNY': 'CNY',   // 人民币
      'JPY': 'JPY',   // 日元
      'KRW': 'KRW',   // 韩元
      'TWD': 'TWD',   // 新台币
      'HKD': 'HKD',   // 港币
      'MOP': 'MOP',   // 澳门帕塔卡
      'SGD': 'SGD',   // 新加坡元
      'BRN': 'BND',   // 文莱元
      'FJD': 'FJD',   // 斐济元
      'SBD': 'SBD',   // 所罗门群岛元
      'VUV': 'VUV',   // 瓦努阿图瓦图
      'NCF': 'XPF',   // 新喀里多尼亚使用太平洋法郎
      'PGK': 'PGK',   // 巴布亚新几内亚基那
      'WST': 'WST',   // 萨摩亚塔拉
      'TOP': 'TOP',   // 汤加潘加
      'AUD': 'AUD',   // 澳元
      'NZD': 'NZD'    // 新西兰元
    };
    
    // 更新续费价格隐藏字段
    function updateRenewalPrice() {
      const amount = document.getElementById('renewalPriceAmount').value;
      const currency = document.getElementById('renewalPriceCurrency').value;
      
      if (amount && currency) {
        document.getElementById('renewalPrice').value = `${amount} ${currency}`;
        calculateValues();
      } else {
        document.getElementById('renewalPrice').value = '';
      }
    }
    
    // 更新出售价格隐藏字段
    function updateSalePrice() {
      const amount = document.getElementById('salePriceAmount').value;
      const currency = document.getElementById('salePriceCurrency').value;
      
      if (amount && currency) {
        document.getElementById('salePrice').value = `${amount} ${currency}`;
        calculateValues();
      } else {
        document.getElementById('salePrice').value = '';
      }
    }
    
    // 从价格字符串中识别货币 - 简化版本，主要处理新格式
    function detectCurrency(priceString) {
      if (!priceString || typeof priceString !== 'string') {
        return { currency: 'CNY', amount: 0 };
      }
      
      const trimmed = priceString.trim();
      
      // 新格式：数字 + 空格 + 货币代码 (如 "299 USD")
      const newFormatMatch = trimmed.match(/^([0-9,.]+)\s+([A-Z]{3})$/i);
      if (newFormatMatch) {
        const amount = parseFloat(newFormatMatch[1].replace(/[,]/g, ''));
        const currency = newFormatMatch[2].toUpperCase();
        return { currency, amount };
      }
      
      // 检查货币代码 (如 USD 299, EUR299)
      const codeMatch = trimmed.match(/^([A-Z]{3})\s*([0-9,.\s]+)/i);
      if (codeMatch) {
        const currency = codeMatch[1].toUpperCase();
        const amount = parseFloat(codeMatch[2].replace(/[,\s]/g, ''));
        return { currency, amount };
      }
      
      // 检查货币符号在前面 (如 $299, €299)
      for (const [symbol, currency] of Object.entries(currencySymbols)) {
        if (trimmed.startsWith(symbol)) {
          const amount = parseFloat(trimmed.substring(symbol.length).replace(/[,\s]/g, ''));
          // 特殊处理¥符号 - 根据金额大小判断是人民币还是日元
          if (symbol === '¥') {
            // 如果金额大于1000，很可能是日元；否则是人民币
            const detectedCurrency = amount > 1000 ? 'JPY' : 'CNY';
            return { currency: detectedCurrency, amount };
          }
          return { currency, amount };
        }
      }
      
      // 检查货币符号在后面 (如 299$, 299€)
      for (const [symbol, currency] of Object.entries(currencySymbols)) {
        if (trimmed.endsWith(symbol)) {
          const amount = parseFloat(trimmed.substring(0, trimmed.length - symbol.length).replace(/[,\s]/g, ''));
          if (symbol === '¥') {
            const detectedCurrency = amount > 1000 ? 'JPY' : 'CNY';
            return { currency: detectedCurrency, amount };
          }
          return { currency, amount };
        }
      }
      
      // 检查货币代码在后面 (如 299 USD, 299USD)
      const codeMatchEnd = trimmed.match(/^([0-9,.\s]+)\s*([A-Z]{3})$/i);
      if (codeMatchEnd) {
        const amount = parseFloat(codeMatchEnd[1].replace(/[,\s]/g, ''));
        const currency = codeMatchEnd[2].toUpperCase();
        return { currency, amount };
      }
      
      // 默认当作人民币处理
      const amount = parseFloat(trimmed.replace(/[,\s¥]/g, '')) || 0;
      return { currency: 'CNY', amount };
    }
    
    // 汇率缓存 - 支持多基准货币，按日期缓存
    let exchangeRatesCache = {};
    
    // 获取当前日期字符串 (YYYY-MM-DD)
    function getCurrentDateString() {
      const today = new Date();
      return formatDateToString(today);
    }
    
    // 清除汇率缓存函数（用于调试）
    window.clearExchangeRatesCache = function() {
      exchangeRatesCache = {};
      console.log('汇率缓存已清除');
    };
    
    // 强制刷新今日汇率
    window.refreshTodayExchangeRates = async function() {
      const today = getCurrentDateString();
      console.log(`🔄 强制刷新今日汇率: ${today}`);
      
      // 清除今日所有缓存
      const keysToDelete = [];
      for (const key in exchangeRatesCache) {
        if (key.includes(today)) {
          keysToDelete.push(key);
        }
      }
      
      keysToDelete.forEach(key => {
        delete exchangeRatesCache[key];
      });
      
      console.log(`清除了今日 ${keysToDelete.length} 个汇率缓存，准备重新获取`);
      
      // 重新获取主要货币汇率
      try {
        await getExchangeRates('USD');
        await getExchangeRates('EUR');
        await getExchangeRates('CNY');
        console.log('✅ 今日汇率刷新完成');
      } catch (error) {
        console.error('❌ 汇率刷新失败:', error.message);
      }
    };
    
    // 清除过期的汇率缓存（保留今天的缓存）
    function cleanExpiredCache() {
      const today = getCurrentDateString();
      const keysToDelete = [];
      
      for (const key in exchangeRatesCache) {
        if (!key.includes(today)) {
          keysToDelete.push(key);
        }
      }
      
      keysToDelete.forEach(key => {
        delete exchangeRatesCache[key];
      });
      
      if (keysToDelete.length > 0) {
        console.log(`清除了 ${keysToDelete.length} 个过期汇率缓存`);
      }
    }
    
    // 获取指定基准货币的实时汇率 - 每日更新
    async function getExchangeRates(baseCurrency = 'USD') {
      const today = getCurrentDateString();
      const cacheKey = `${baseCurrency}_${today}`;
      
      // 清除过期缓存
      cleanExpiredCache();
      
      // 检查今日缓存
      if (exchangeRatesCache[cacheKey]) {
        console.log(`使用今日汇率缓存 (${baseCurrency}): ${today}`);
        return exchangeRatesCache[cacheKey];
      }
      
      console.log(`获取今日汇率 (${baseCurrency}): ${today}`);
      
      // 构建API URL - 根据基准货币动态选择
      const apiUrl = `https://open.er-api.com/v6/latest/${baseCurrency}`;
      
      try {
        const response = await fetch(apiUrl);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        
        if (!data.rates || typeof data.rates !== 'object') {
          throw new Error('汇率数据格式错误');
        }
        
        // 验证基准货币数据
        if (!data.base_code || data.base_code !== baseCurrency) {
          throw new Error(`基准货币不匹配: 期望${baseCurrency}, 实际${data.base_code}`);
        }
        
        // 构建汇率对象，包含基准货币自身
        const rates = { [baseCurrency]: 1, ...data.rates };
        
        // 缓存汇率数据
        const rateData = {
          rates: rates,
          baseCurrency: baseCurrency,
          date: today,
          timestamp: Date.now(),
          source: 'ExchangeRate-API',
          isRealTime: true,
          cacheKey: cacheKey
        };
        
        exchangeRatesCache[cacheKey] = rateData;
        
        console.log(`✅ 今日汇率获取成功 (${baseCurrency}): ${today}`);
        
        return rateData;
      } catch (error) {
        console.error(`获取${baseCurrency}基准汇率失败:`, error.message);
        throw new Error(`无法获取${baseCurrency}基准汇率，请检查网络连接后重试`);
      }
    }
    
    // 转换汇率 - 从一种货币转换到另一种货币
    async function convertCurrency(amount, fromCurrency, toCurrency, isSoldServer = false) {
      if (fromCurrency === toCurrency) {
        return amount;
      }
      
      try {
        // 获取以fromCurrency为基准的汇率（考虑已售状态）
        const rateData = await getExchangeRatesForCalculation(fromCurrency, isSoldServer);
        const rates = rateData.rates;
        
        if (!rates[toCurrency]) {
          throw new Error(`不支持的货币转换: ${fromCurrency} -> ${toCurrency}`);
        }
        
        const convertedAmount = amount * rates[toCurrency];
        
        console.log(`货币转换${rateData.isLocked ? ' (使用锁定汇率)' : ''}: ${amount} ${fromCurrency} = ${convertedAmount.toFixed(4)} ${toCurrency} (汇率: ${rates[toCurrency].toFixed(6)})`);
        
        return convertedAmount;
      } catch (error) {
        console.error('货币转换失败:', error.message);
        throw error;
      }
    }
    

    
    // 根据续费周期计算月数
    function getCycleMonths(cycle) {
      const cycleMap = {
        '月付': 1,
        '季付': 3,
        '半年付': 6,
        '年付': 12,
        '两年付': 24,
        '三年付': 36,
        '五年付': 60,
        '永久': 0 // 永久不参与时间计算
      };
      return cycleMap[cycle] || 0;
    }
    
    // 推算购买日期
    function calculatePurchaseDate(expirationDate, renewalCycle) {
      if (!expirationDate || !renewalCycle || renewalCycle === '永久') {
        return null;
      }
      
      const expDate = new Date(expirationDate);
      const months = getCycleMonths(renewalCycle);
      
      if (months === 0) return null;
      
      // 向前推算购买日期
      const purchaseDate = new Date(expDate);
      purchaseDate.setMonth(purchaseDate.getMonth() - months);
      
      return purchaseDate;
    }
    
    // 精确计算两个日期之间的天数差异（考虑闰年）
    function calculateDaysDifference(startDate, endDate) {
      const start = new Date(startDate);
      const end = new Date(endDate);
      
      // 计算毫秒差异并转换为天数
      const timeDiff = end.getTime() - start.getTime();
      const daysDiff = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
      
      return daysDiff;
    }
    
    // 计算剩余天数占比
    function calculateRemainingRatio(purchaseDate, expirationDate, today = new Date()) {
      if (!purchaseDate || !expirationDate) {
        return 0;
      }
      
      const totalDays = calculateDaysDifference(purchaseDate, expirationDate);
      const remainingDays = Math.max(0, calculateDaysDifference(today, expirationDate));
      
      if (totalDays <= 0) {
        return 0;
      }
      
      const ratio = remainingDays / totalDays;
      return Math.max(0, Math.min(1, ratio)); // 确保在0-1之间
    }
    
        // 计算剩余价值和溢价信息 - 新的逻辑
    async function calculateValues() {
      try {
        // 显示计算状态
        document.getElementById('remainingValueDisplay').value = '计算中...';
        document.getElementById('premiumValueDisplay').value = '计算中...';
        
        const renewalPriceString = document.getElementById('renewalPrice').value;
        const { currency: renewalCurrency, amount: renewalPrice } = detectCurrency(renewalPriceString);
        const renewalCycle = document.getElementById('renewalCycle').value;
        const expirationDate = document.getElementById('expirationDate').value;
        const salePrice = document.getElementById('salePrice').value;
        
        // 获取状态信息（在函数开头声明一次，避免重复声明）
        const status = document.getElementById('status').value;
        const statusChangedDate = document.getElementById('statusChangedDate') ? document.getElementById('statusChangedDate').value : null;
        const isSold = (status === '已售');
        
        // 检查必要字段 - 永久服务器不需要到期日期，续费价格可以为0（永久免费）
        if (renewalPrice === null || renewalPrice === undefined || renewalPrice === '' || !renewalCycle || 
            (renewalCycle !== '永久' && !expirationDate)) {
          document.getElementById('remainingValue').value = '';
          document.getElementById('remainingValueDisplay').value = '';
          document.getElementById('premiumValue').value = '';
          document.getElementById('premiumValueDisplay').value = '';
          document.getElementById('remainingValueInfo').innerHTML = `
            <div style="background: rgba(156, 163, 175, 0.1); padding: 12px; border-radius: 6px; border-left: 4px solid #9ca3af;">
              <strong style="color: #6b7280;">📋 待计算</strong><br>
              <span style="color: #6b7280;">请填写续费价格、续费周期和到期日期</span>
            </div>
          `;
          document.getElementById('premiumValueInfo').innerHTML = '';
          return;
        }
        
        // 检查是否为永久服务器
        if (renewalCycle === '永久') {
          // 永久服务器：剩余价值 = 续费价格（保持原货币）
          const remainingValueOriginal = renewalPrice;
          
          // 处理永久免费的情况（续费价格为0）
          let remainingValueCNY = 0;
          if (renewalPrice > 0) {
            remainingValueCNY = await convertCurrency(remainingValueOriginal, renewalCurrency, 'CNY', isSold);
          }
          
          // 存储原始货币的剩余价值
          if (renewalPrice === 0) {
            document.getElementById('remainingValue').value = `0 ${renewalCurrency}`;
            document.getElementById('remainingValueDisplay').value = `¥0.00`;
          } else {
            document.getElementById('remainingValue').value = `${remainingValueOriginal} ${renewalCurrency}`;
            document.getElementById('remainingValueDisplay').value = `¥${remainingValueCNY.toFixed(2)}`;
          }
          
          // 获取汇率信息用于显示（永久免费时不需要汇率）
          let renewalRateData = null;
          let renewalToCnyRate = 0;
          if (renewalPrice > 0) {
            renewalRateData = await getExchangeRatesForCalculation(renewalCurrency, isSold);
            renewalToCnyRate = renewalRateData.rates['CNY'];
          }
          
          // 计算溢价
          let premiumInfo = '';
          let saleInfo = '';
          if (salePrice) {
            const { currency: saleCurrency, amount: salePriceAmount } = detectCurrency(salePrice);
            const salePriceCNY = await convertCurrency(salePriceAmount, saleCurrency, 'CNY', isSold);
            const premium = salePriceCNY - remainingValueCNY;
            const premiumPercentage = remainingValueCNY > 0 ? ((premium / remainingValueCNY) * 100).toFixed(1) : '0';
            
            // 获取出售价格的汇率信息
            const saleRateData = await getExchangeRatesForCalculation(saleCurrency, isSold);
            const saleToCnyRate = saleRateData.rates['CNY'];
            
            document.getElementById('premiumValue').value = `¥${premium.toFixed(2)}`;
            document.getElementById('premiumValueDisplay').value = `¥${premium.toFixed(2)}`;
            
            saleInfo = `
              <div style="background: rgba(59, 130, 246, 0.1); padding: 12px; border-radius: 6px; border-left: 4px solid #3b82f6; margin-bottom: 12px;">
                <strong style="color: #1d4ed8;">💰 出售价格分析</strong><br>
                <span style="color: #1e40af;">出售价格:</span> ${salePriceAmount} ${saleCurrency} ≈ ¥${salePriceCNY.toFixed(2)}<br>
                <span style="color: #6b7280; font-size: 0.75rem;">汇率${saleRateData.isLocked ? ' (已售时锁定)' : ''}: 1 ${saleCurrency} = ¥${saleToCnyRate.toFixed(4)}</span>
              </div>
            `;
            
            premiumInfo = `
              <div style="background: ${premium >= 0 ? 'rgba(239, 68, 68, 0.1)' : 'rgba(34, 197, 94, 0.1)'}; padding: 12px; border-radius: 6px; border-left: 4px solid ${premium >= 0 ? '#ef4444' : '#22c55e'};">
                <strong style="color: ${premium >= 0 ? '#dc2626' : '#16a34a'};">${premium >= 0 ? '📈 溢价' : '📉 折价'}</strong><br>
                <span style="color: ${premium >= 0 ? '#b91c1c' : '#059669'};">溢价金额:</span> ${premium >= 0 ? '+' : ''}¥${premium.toFixed(2)}<br>
                <span style="color: ${premium >= 0 ? '#b91c1c' : '#059669'};">溢价率:</span> ${premium >= 0 ? '+' : ''}${premiumPercentage}%
              </div>
            `;
          } else {
            document.getElementById('premiumValue').value = '';
            document.getElementById('premiumValueDisplay').value = '';
            premiumInfo = '<div style="color: #6b7280; font-style: italic;">请输入出售价格以计算溢价</div>';
          }
          
          // 设置计算详情
          // 根据状态决定显示的日期
          let displayDateStr;
          let statusInfo = '';
          let bgColor = 'rgba(34, 197, 94, 0.1)';
          let borderColor = '#22c55e';
          let textColor = '#16a34a';
          let titleColor = '#059669';
          
          if (status === '已售' && statusChangedDate) {
            displayDateStr = new Date(statusChangedDate).toLocaleDateString('zh-CN');
            statusInfo = `<span style="color: ${titleColor};">状态变更日期:</span> ${displayDateStr} (已售时锁定)<br>`;
            bgColor = 'rgba(168, 85, 247, 0.1)';
            borderColor = '#a855f7';
            textColor = '#7c3aed';
            titleColor = '#6d28d9';
          } else {
            displayDateStr = new Date().toLocaleDateString('zh-CN');
            statusInfo = `<span style="color: ${titleColor};">计算基准日期:</span> ${displayDateStr} (实时更新)<br>`;
          }
          
          let detailsHTML;
          if (renewalPrice === 0) {
            // 永久免费服务器
            detailsHTML = `
              <div style="background: ${bgColor}; padding: 12px; border-radius: 6px; border-left: 4px solid ${borderColor};">
                <strong style="color: ${textColor};">🆓 永久免费服务器</strong><br>
                ${statusInfo}
                <span style="color: ${titleColor};">续费价格:</span> ${renewalPrice} ${renewalCurrency} (免费)<br>
                <span style="color: ${titleColor};">剩余价值:</span> ${remainingValueOriginal} ${renewalCurrency} = ¥0.00<br>
                <span style="color: #6b7280; font-size: 0.75rem;">永久免费服务器无需汇率转换</span>
              </div>
            `;
          } else {
            // 付费永久服务器
            const rateDate = renewalRateData.date || getCurrentDateString();
            detailsHTML = `
              <div style="background: ${bgColor}; padding: 12px; border-radius: 6px; border-left: 4px solid ${borderColor};">
                <strong style="color: ${textColor};">💎 永久服务器</strong><br>
                ${statusInfo}
                <span style="color: ${titleColor};">续费价格:</span> ${renewalPrice} ${renewalCurrency}<br>
                <span style="color: ${titleColor};">剩余价值:</span> ${remainingValueOriginal} ${renewalCurrency} ≈ ¥${remainingValueCNY.toFixed(2)}<br>
                <span style="color: #6b7280; font-size: 0.75rem;">汇率${renewalRateData.isLocked ? ' (已售时锁定)' : ''} (${rateDate}): 1 ${renewalCurrency} = ¥${renewalToCnyRate.toFixed(4)}</span>
              </div>
            `;
          }
          
          document.getElementById('remainingValueInfo').innerHTML = detailsHTML;
          
          document.getElementById('premiumValueInfo').innerHTML = saleInfo + premiumInfo;
          return;
        }
        
        // 推算购买日期
        const purchaseDate = calculatePurchaseDate(expirationDate, renewalCycle);
        
        if (!purchaseDate) {
          document.getElementById('remainingValue').value = '计算错误';
          document.getElementById('remainingValueDisplay').value = '计算错误';
          document.getElementById('remainingValueInfo').innerHTML = '无法推算购买日期，请检查续费周期设置';
          return;
        }
        
        // 计算剩余天数占比（精确计算，考虑闰年）
        // 根据状态决定使用的基准日期
        let calculationDate;
        if (status === '已售' && statusChangedDate) {
          // 已售状态且有状态变更日期：使用状态变更日期
          calculationDate = new Date(statusChangedDate);
          calculationDate.setHours(0, 0, 0, 0);
        } else {
          // 出售状态或无状态变更日期：使用当前日期
          calculationDate = new Date();
          calculationDate.setHours(0, 0, 0, 0);
        }
        
        const remainingRatio = calculateRemainingRatio(purchaseDate, expirationDate, calculationDate);
        
        // 计算剩余价值（保持续费价格的货币类型）
        const remainingValueOriginal = renewalPrice * remainingRatio;
        
        // 使用动态汇率转换为人民币
        const remainingValueCNY = await convertCurrency(remainingValueOriginal, renewalCurrency, 'CNY', isSold);
        
        // 计算天数信息
        const totalDays = calculateDaysDifference(purchaseDate, expirationDate);
        const remainingDays = Math.max(0, calculateDaysDifference(calculationDate, expirationDate));
        const remainingPercentage = (remainingRatio * 100).toFixed(1);
        
        // 获取汇率信息用于显示
        const renewalRateData = await getExchangeRatesForCalculation(renewalCurrency, isSold);
        const renewalToCnyRate = renewalRateData.rates['CNY'];
        
        // 更新显示
        document.getElementById('remainingValue').value = `${remainingValueOriginal.toFixed(2)} ${renewalCurrency}`;
        document.getElementById('remainingValueDisplay').value = `¥${remainingValueCNY.toFixed(2)}`;
        
        const purchaseDateStr = purchaseDate.toLocaleDateString('zh-CN');
        const expirationDateStr = new Date(expirationDate).toLocaleDateString('zh-CN');
        
        // 计算溢价信息
        let premiumInfo = '';
        let saleInfo = '';
        if (salePrice) {
          const { currency: saleCurrency, amount: salePriceAmount } = detectCurrency(salePrice);
          const salePriceCNY = await convertCurrency(salePriceAmount, saleCurrency, 'CNY', isSold);
          const premium = salePriceCNY - remainingValueCNY;
          const premiumPercentage = remainingValueCNY > 0 ? ((premium / remainingValueCNY) * 100).toFixed(1) : '0';
          
          // 获取出售价格的汇率信息
          const saleRateData = await getExchangeRatesForCalculation(saleCurrency, isSold);
          const saleToCnyRate = saleRateData.rates['CNY'];
          
          document.getElementById('premiumValue').value = `¥${premium.toFixed(2)}`;
          document.getElementById('premiumValueDisplay').value = `¥${premium.toFixed(2)}`;
          
          saleInfo = `
            <div style="background: rgba(59, 130, 246, 0.1); padding: 12px; border-radius: 6px; border-left: 4px solid #3b82f6; margin-bottom: 12px;">
              <strong style="color: #1d4ed8;">💰 出售价格分析</strong><br>
              <span style="color: #1e40af;">出售价格:</span> ${salePriceAmount} ${saleCurrency} ≈ ¥${salePriceCNY.toFixed(2)}<br>
              <span style="color: #6b7280; font-size: 0.75rem;">汇率${saleRateData.isLocked ? ' (已售时锁定)' : ''}: 1 ${saleCurrency} = ¥${saleToCnyRate.toFixed(4)}</span>
            </div>
          `;
          
          premiumInfo = `
            <div style="background: ${premium >= 0 ? 'rgba(239, 68, 68, 0.1)' : 'rgba(34, 197, 94, 0.1)'}; padding: 12px; border-radius: 6px; border-left: 4px solid ${premium >= 0 ? '#ef4444' : '#22c55e'};">
              <strong style="color: ${premium >= 0 ? '#dc2626' : '#16a34a'};">${premium >= 0 ? '📈 溢价' : '📉 折价'}</strong><br>
              <span style="color: ${premium >= 0 ? '#b91c1c' : '#059669'};">溢价金额:</span> ${premium >= 0 ? '+' : ''}¥${premium.toFixed(2)}<br>
              <span style="color: ${premium >= 0 ? '#b91c1c' : '#059669'};">溢价率:</span> ${premium >= 0 ? '+' : ''}${premiumPercentage}%
            </div>
          `;
        } else {
          document.getElementById('premiumValue').value = '';
          document.getElementById('premiumValueDisplay').value = '';
          premiumInfo = '<div style="color: #6b7280; font-style: italic;">请输入出售价格以计算溢价</div>';
        }
        
        // 设置计算详情
        const calculationDateStr = calculationDate.toLocaleDateString('zh-CN');
        const rateDate = renewalRateData.date || getCurrentDateString();
        
        // 根据状态设置不同的显示样式和说明
        let statusInfo = '';
        let bgColor = 'rgba(16, 185, 129, 0.1)';
        let borderColor = '#10b981';
        let textColor = '#059669';
        let titleColor = '#047857';
        
        if (status === '已售' && statusChangedDate) {
          bgColor = 'rgba(168, 85, 247, 0.1)';
          borderColor = '#a855f7';
          textColor = '#7c3aed';
          titleColor = '#6d28d9';
          statusInfo = `<span style="color: ${titleColor};">状态变更日期:</span> ${calculationDateStr} (已售时锁定)<br>`;
        } else {
          statusInfo = `<span style="color: ${titleColor};">计算基准日期:</span> ${calculationDateStr} (实时更新)<br>`;
        }
        
        document.getElementById('remainingValueInfo').innerHTML = `
          <div style="background: ${bgColor}; padding: 12px; border-radius: 6px; border-left: 4px solid ${borderColor};">
            <strong style="color: ${textColor};">📊 剩余价值计算</strong><br>
            <span style="color: ${titleColor};">推算购买日期:</span> ${purchaseDateStr}<br>
            <span style="color: ${titleColor};">到期日期:</span> ${expirationDateStr}<br>
            ${statusInfo}
            <span style="color: ${titleColor};">续费价格:</span> ${renewalPrice} ${renewalCurrency}<br>
            <span style="color: ${titleColor};">剩余时间:</span> ${remainingDays}天 / 总计${totalDays}天 (${remainingPercentage}%)<br>
            <span style="color: ${titleColor};">剩余价值:</span> ${remainingValueOriginal.toFixed(2)} ${renewalCurrency} ≈ ¥${remainingValueCNY.toFixed(2)}<br>
            <span style="color: #6b7280; font-size: 0.75rem;">汇率${renewalRateData.isLocked ? ' (已售时锁定)' : ''} (${rateDate}): 1 ${renewalCurrency} = ¥${renewalToCnyRate.toFixed(4)}</span>
          </div>
        `;
        
        document.getElementById('premiumValueInfo').innerHTML = saleInfo + premiumInfo;
        
      } catch (error) {
        console.error('计算失败:', error);
        let errorMessage = '计算失败';
        
        if (error.message.includes('无法获取实时汇率')) {
          errorMessage = '无法获取汇率';
          document.getElementById('remainingValueInfo').innerHTML = `
            <div style="background: rgba(239, 68, 68, 0.1); padding: 12px; border-radius: 6px; border-left: 4px solid #ef4444;">
              <strong style="color: #dc2626;">⚠️ 汇率获取失败</strong><br>
              <span style="color: #b91c1c;">无法获取实时汇率，请检查网络连接或稍后重试</span>
            </div>
          `;
          document.getElementById('premiumValueInfo').innerHTML = `
            <div style="background: rgba(239, 68, 68, 0.1); padding: 12px; border-radius: 6px; border-left: 4px solid #ef4444;">
              <strong style="color: #dc2626;">⚠️ 汇率获取失败</strong><br>
              <span style="color: #b91c1c;">无法获取实时汇率，请检查网络连接或稍后重试</span>
            </div>
          `;
        } else {
          document.getElementById('remainingValueInfo').innerHTML = `
            <div style="background: rgba(239, 68, 68, 0.1); padding: 12px; border-radius: 6px; border-left: 4px solid #ef4444;">
              <strong style="color: #dc2626;">❌ 计算错误</strong><br>
              <span style="color: #b91c1c;">计算过程中出现错误: ${error.message}</span>
            </div>
          `;
          document.getElementById('premiumValueInfo').innerHTML = `
            <div style="background: rgba(239, 68, 68, 0.1); padding: 12px; border-radius: 6px; border-left: 4px solid #ef4444;">
              <strong style="color: #dc2626;">❌ 计算错误</strong><br>
              <span style="color: #b91c1c;">计算过程中出现错误: ${error.message}</span>
            </div>
          `;
        }
        
        document.getElementById('remainingValue').value = errorMessage;
        document.getElementById('remainingValueDisplay').value = errorMessage;
        document.getElementById('premiumValue').value = errorMessage;
        document.getElementById('premiumValueDisplay').value = errorMessage;
      }
    }
    
    // 将函数绑定到全局作用域
    window.calculateValues = calculateValues;
    window.updateRenewalPrice = updateRenewalPrice;
    window.updateSalePrice = updateSalePrice;
    
    // 测试货币识别功能（仅在开发环境使用）
    window.testCurrencyDetection = function() {
      const testCases = [
        '$299', '€199', '¥1999', '299 USD', 'HK$500', 'A$199', 
        '299.99$', 'EUR 299', 'CHF 199', '₹1999', '₩299000',
        '299', '299.99', 'USD299', '299EUR'
      ];
      
      console.log('货币识别测试:');
      testCases.forEach(test => {
        const result = detectCurrency(test);
        console.log(`${test} -> ${result.currency} ${result.amount}`);
      });
    };
    
    // 测试实时汇率API功能
    window.testExchangeRates = async function(baseCurrency = 'USD') {
      console.log(`🔄 开始测试实时汇率API (${baseCurrency}基准)...`);
      try {
        const result = await getExchangeRates(baseCurrency);
        console.log('✅ 实时汇率API测试成功!');
        console.log('📊 数据来源:', result.source);
        console.log('💰 基准货币:', result.baseCurrency);
        console.log('📅 汇率日期:', result.date);
        console.log('⏰ 获取时间:', new Date(result.timestamp).toLocaleString('zh-CN'));
        console.log('🌐 实时汇率:', result.isRealTime ? '是' : '否');
        console.log('🔑 缓存键:', result.cacheKey);
        console.log('💱 主要汇率:');
        console.log(`   1 ${baseCurrency} = ${result.rates.CNY || 'N/A'} CNY`);
        console.log(`   1 ${baseCurrency} = ${result.rates.USD || 'N/A'} USD`);
        console.log(`   1 ${baseCurrency} = ${result.rates.EUR || 'N/A'} EUR`);
        console.log(`   1 ${baseCurrency} = ${result.rates.GBP || 'N/A'} GBP`);
        return result;
      } catch (error) {
        console.error('❌ 实时汇率API测试失败:', error.message);
        return null;
      }
    };
    
    // 检查汇率缓存状态
    window.checkExchangeRatesCache = function() {
      const today = getCurrentDateString();
      console.log(`📋 汇率缓存状态检查 (${today}):`);
      
      let todayCacheCount = 0;
      let totalCacheCount = 0;
      
      for (const key in exchangeRatesCache) {
        totalCacheCount++;
        if (key.includes(today)) {
          todayCacheCount++;
          const cache = exchangeRatesCache[key];
          console.log(`  ✅ ${key}: ${cache.baseCurrency} (${new Date(cache.timestamp).toLocaleTimeString('zh-CN')})`);
        } else {
          console.log(`  ⏰ ${key}: 过期缓存`);
        }
      }
      
      console.log(`📊 缓存统计: 今日 ${todayCacheCount} 个，总计 ${totalCacheCount} 个`);
      
      if (totalCacheCount > todayCacheCount) {
        console.log('💡 建议运行 cleanExpiredCache() 清除过期缓存');
      }
      
      return {
        today: todayCacheCount,
        total: totalCacheCount,
        date: today
      };
    };
    
    // 测试货币转换功能
    window.testCurrencyConversion = async function() {
      console.log('🔄 开始测试货币转换...');
      try {
        const amount = 100;
        const conversions = [
          { from: 'USD', to: 'CNY' },
          { from: 'EUR', to: 'CNY' },
          { from: 'GBP', to: 'CNY' },
          { from: 'JPY', to: 'CNY' },
          { from: 'CNY', to: 'USD' }
        ];
        
        for (const conv of conversions) {
          const result = await convertCurrency(amount, conv.from, conv.to);
          console.log(`${amount} ${conv.from} = ${result.toFixed(4)} ${conv.to}`);
        }
        
        console.log('✅ 货币转换测试完成!');
      } catch (error) {
        console.error('❌ 货币转换测试失败:', error.message);
      }
    };
    
    // 测试价格计算功能
    window.testCalculation = function() {
      console.log('开始测试价格计算...');
      
      // 模拟填写表单
      document.getElementById('renewalPriceAmount').value = '299';
      setCustomSelectValue('renewalPriceCurrencySelect', 'USD');
      setCustomSelectValue('renewalCycleSelect', '年付');
      document.getElementById('expirationDate').value = '2025-12-15';
      document.getElementById('salePriceAmount').value = '1500';
      setCustomSelectValue('salePriceCurrencySelect', 'CNY');
      
      // 更新隐藏字段
      updateRenewalPrice();
      updateSalePrice();
      
      // 计算
      calculateValues();
      
      console.log('测试完成，请查看剩余价值和溢价计算结果');
    };
    
    // 显示系统状态（用于调试）
    window.showSystemStatus = function() {
      const today = getCurrentDateString();
      const now = new Date();
      
      console.log('🔍 B-Market 系统状态:');
      console.log(`📅 当前日期: ${today}`);
      console.log(`⏰ 当前时间: ${now.toLocaleString('zh-CN')}`);
      
      // 汇率缓存状态
      const cacheStatus = checkExchangeRatesCache();
      
      // 时区信息
      console.log(`🌍 时区: ${Intl.DateTimeFormat().resolvedOptions().timeZone}`);
      console.log(`📍 时区偏移: UTC${now.getTimezoneOffset() > 0 ? '-' : '+'}${Math.abs(now.getTimezoneOffset() / 60)}`);
      
      return {
        date: today,
        time: now.toLocaleString('zh-CN'),
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        cache: cacheStatus
      };
    };
    
    // 为已售日期输入框和汇率输入框添加事件监听器
    document.addEventListener('DOMContentLoaded', function() {
      const soldDateInput = document.getElementById('soldDate');
      if (soldDateInput) {
        // 监听输入事件进行实时格式化
        soldDateInput.addEventListener('input', function(e) {
          formatSoldDateInput(e.target);
        });
        
        // 监听失去焦点事件进行最终验证
        soldDateInput.addEventListener('blur', handleSoldDateChange);
        soldDateInput.addEventListener('change', handleSoldDateChange);
      }
      
      // 为已售汇率输入框添加事件监听器
      const soldExchangeRateInput = document.getElementById('soldExchangeRate');
      if (soldExchangeRateInput) {
        soldExchangeRateInput.addEventListener('input', handleSoldExchangeRateChange);
        soldExchangeRateInput.addEventListener('change', handleSoldExchangeRateChange);
      }
    });
    
    // 表单提交
    document.getElementById('serverForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      
      // 国家代码已经通过隐藏字段正确设置，无需额外处理
      
      // 处理标签
      if (data.tags) {
        data.tags = data.tags.split(',').map(tag => tag.trim()).filter(tag => tag);
      } else {
        data.tags = [];
      }
      
      // 处理相关链接
      if (data.relatedLinks) {
        const links = data.relatedLinks.split('\n')
          .map(line => line.trim())
          .filter(line => line && line.includes('|'))
          .map(line => {
            const [name, url] = line.split('|');
            return { name: name.trim(), url: url.trim() };
          });
        data.relatedLinks = links;
      } else {
        data.relatedLinks = [];
      }
      
      // 处理销售时汇率数据
      if (data.soldExchangeRates) {
        try {
          data.soldExchangeRates = JSON.parse(data.soldExchangeRates);
        } catch (error) {
          console.error('解析销售时汇率数据失败:', error);
          data.soldExchangeRates = null;
        }
      } else {
        data.soldExchangeRates = null;
      }
      
      // 如果状态是已售，且有自定义汇率，需要构建汇率数据
      if (data.status === '已售' && data.soldExchangeRate) {
        const customRate = parseFloat(data.soldExchangeRate);
        if (!isNaN(customRate) && customRate > 0) {
          // 如果没有现有的汇率数据，创建新的
          if (!data.soldExchangeRates) {
            data.soldExchangeRates = {
              USD: customRate,
              EUR: customRate,
              GBP: customRate,
              JPY: customRate,
              CNY: 1
            };
          } else {
            // 如果有现有汇率数据，更新为自定义汇率
            data.soldExchangeRates.USD = customRate;
            data.soldExchangeRates.EUR = customRate;
            data.soldExchangeRates.GBP = customRate;
            data.soldExchangeRates.JPY = customRate;
          }
          console.log('📝 使用自定义汇率:', customRate);
        }
      }
      
      // 清除soldExchangeRate字段，避免重复保存
      delete data.soldExchangeRate;
      
      // 🔄 自动计算并更新剩余价值
      try {
        // 先确保所有价格和日期字段都是最新的
        updateRenewalPrice();
        updateSalePrice();
        
        // 触发价值计算
        await calculateValues();
        
        // 等待DOM更新完成
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // 获取当前表单的状态
        const currentStatus = document.getElementById('status').value;
        
        // 计算剩余价值
        const remainingValueElement = document.querySelector('.remaining-value');
        let calculatedRemainingValue = '';
        
        if (remainingValueElement) {
          const valueText = remainingValueElement.textContent || '';
          // 提取数值部分，格式如 "1,234.56 CNY"
          const match = valueText.match(/([0-9,]+\.?[0-9]*)\s*([A-Z]{3})/);
          if (match) {
            const value = match[1].replace(/,/g, '');
            const currency = match[2];
            calculatedRemainingValue = `${value} ${currency}`;
          }
        }
        
        // 如果计算出了剩余价值，更新到数据中
        if (calculatedRemainingValue) {
          data.remainingValue = calculatedRemainingValue;
          console.log('💰 自动计算剩余价值:', calculatedRemainingValue);
        }
        
        // 计算溢价
        const premiumValueElement = document.querySelector('.premium-value');
        let calculatedPremiumValue = '';
        
        if (premiumValueElement) {
          const valueText = premiumValueElement.textContent || '';
          // 提取数值部分，格式如 "1,234.56 CNY"
          const match = valueText.match(/([0-9,]+\.?[0-9]*)\s*([A-Z]{3})/);
          if (match) {
            const value = match[1].replace(/,/g, '');
            const currency = match[2];
            calculatedPremiumValue = `${value} ${currency}`;
          }
        }
        
        // 如果计算出了溢价，更新到数据中
        if (calculatedPremiumValue) {
          data.premiumValue = calculatedPremiumValue;
          console.log('📈 自动计算溢价:', calculatedPremiumValue);
        }
        
      } catch (error) {
        console.error('⚠️ 自动计算价值时出错:', error);
        // 继续提交，不让计算错误阻止保存
      }
      
      try {
        const url = currentEditId ? `${API_BASE}/servers/${currentEditId}` : `${API_BASE}/servers`;
        const method = currentEditId ? 'PUT' : 'POST';
        const token = localStorage.getItem('sessionToken');
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showCustomAlert(currentEditId ? '服务器更新成功！' : '服务器添加成功！', 'success');
          closeModal();
          loadServers();
        } else {
          showCustomAlert('操作失败: ' + result.message, 'error');
        }
      } catch (error) {
        console.error('提交失败:', error);
        showCustomAlert('网络错误，操作失败', 'error');
      }
    });
    
    // 点击弹窗外部关闭
    document.getElementById('serverModal').addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        closeModal();
      }
    });
    
    // 认证相关函数
    window.checkAuthentication = async function() {
      const token = localStorage.getItem('sessionToken');
      if (!token) {
        redirectToLogin();
        return false;
      }
      
      try {
        const response = await fetch(`${API_BASE}/auth/verify`, {
          headers: {
            'Authorization': `Bearer ${token}`
          },
          credentials: 'include'
        });
        
        if (!response.ok) {
          if (response.status === 401) {
            localStorage.removeItem('sessionToken');
            redirectToLogin();
            return false;
          }
          throw new Error('认证验证失败');
        }
        
        return true;
      } catch (error) {
        console.error('认证检查失败:', error);
        redirectToLogin();
        return false;
      }
    };
    
    window.redirectToLogin = function() {
      window.location.href = '/login';
    };
    
    window.logout = async function() {
      const token = localStorage.getItem('sessionToken');
      if (token) {
        try {
          await fetch(`${API_BASE}/auth/logout`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`
            },
            credentials: 'include'
          });
        } catch (error) {
          console.error('退出登录失败:', error);
        }
      }
      
      localStorage.removeItem('sessionToken');
      redirectToLogin();
    };
    
    // 修改密码相关函数
    window.openChangePasswordModal = function() {
      const modal = document.getElementById('changePasswordModal');
      modal.classList.add('show');
      
      // 重置表单
      document.getElementById('changePasswordForm').reset();
      document.getElementById('passwordStrengthIndicator').style.display = 'none';
      hideChangePasswordMessage();
      
      // 绑定密码强度检查
      const newPasswordInput = document.getElementById('newPassword');
      newPasswordInput.removeEventListener('input', checkChangePasswordStrength);
      newPasswordInput.addEventListener('input', checkChangePasswordStrength);
      newPasswordInput.addEventListener('focus', () => {
        document.getElementById('passwordStrengthIndicator').style.display = 'block';
      });
    };
    
    window.closeChangePasswordModal = function() {
      const modal = document.getElementById('changePasswordModal');
      modal.classList.add('closing');
      
      setTimeout(() => {
        modal.classList.remove('show', 'closing');
      }, 300);
    };
    
    // 检查密码强度
    window.checkChangePasswordStrength = function() {
      const password = document.getElementById('newPassword').value;
      
      const checks = {
        length: password.length >= 8,
        lowercase: /[a-z]/.test(password),
        uppercase: /[A-Z]/.test(password),
        number: /\d/.test(password),
        special: /[@$!%*?&]/.test(password)
      };
      
      // 更新检查项目状态
      Object.keys(checks).forEach(check => {
        const element = document.getElementById(check + 'Check');
        if (checks[check]) {
          element.className = 'strength-check valid';
          element.textContent = '✓';
        } else {
          element.className = 'strength-check';
          element.textContent = '×';
        }
      });
      
      return Object.values(checks).every(check => check);
    };
    
    // 显示修改密码消息
    window.showChangePasswordMessage = function(message, type = 'error') {
      const messageEl = document.getElementById('changePasswordMessage');
      messageEl.textContent = message;
      messageEl.className = `form-message ${type}`;
      messageEl.style.display = 'block';
    };
    
    // 隐藏修改密码消息
    window.hideChangePasswordMessage = function() {
      const messageEl = document.getElementById('changePasswordMessage');
      messageEl.style.display = 'none';
    };
    
    // 处理修改密码表单提交
    window.handleChangePasswordSubmit = async function(event) {
      event.preventDefault();
      
      const submitBtn = document.getElementById('changePasswordSubmitBtn');
      const btnText = submitBtn.querySelector('.btn-text');
      const btnLoading = submitBtn.querySelector('.btn-loading');
      
      // 防止重复提交
      if (submitBtn.disabled) return;
      
      // 获取表单数据
      const currentPassword = document.getElementById('currentPassword').value;
      const newPassword = document.getElementById('newPassword').value;
      const confirmNewPassword = document.getElementById('confirmNewPassword').value;
      
      // 验证输入
      if (!currentPassword || !newPassword || !confirmNewPassword) {
        showChangePasswordMessage('请填写所有密码字段', 'error');
        return;
      }
      
      if (newPassword !== confirmNewPassword) {
        showChangePasswordMessage('新密码和确认密码不一致', 'error');
        return;
      }
      
      if (currentPassword === newPassword) {
        showChangePasswordMessage('新密码不能与当前密码相同', 'error');
        return;
      }
      
      if (!checkChangePasswordStrength()) {
        showChangePasswordMessage('新密码不符合安全要求，请检查密码强度指示器', 'error');
        return;
      }
      
      // 显示加载状态
      submitBtn.disabled = true;
      btnText.style.display = 'none';
      btnLoading.style.display = 'inline-block';
      hideChangePasswordMessage();
      
      try {
        const token = localStorage.getItem('sessionToken');
        const response = await fetch(`${API_BASE}/auth/change-password`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          credentials: 'include',
          body: JSON.stringify({
            currentPassword,
            newPassword,
            confirmPassword: confirmNewPassword
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // 先关闭密码修改弹窗
          closeChangePasswordModal();
          
          // 延迟显示成功弹窗，确保密码弹窗完全关闭
          setTimeout(() => {
            showCustomAlert('密码修改成功！', 'success');
          }, 350);
        } else {
          showChangePasswordMessage(result.message || '修改密码失败', 'error');
        }
      } catch (error) {
        console.error('修改密码失败:', error);
        showChangePasswordMessage('网络错误，请重试', 'error');
      } finally {
        // 恢复按钮状态
        submitBtn.disabled = false;
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      }
    };
    
    // 绑定修改密码表单提交事件
    document.getElementById('changePasswordForm').addEventListener('submit', handleChangePasswordSubmit);
    
    // 检测是否为移动端
    function isMobileDevice() {
      return window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    // 页面加载时检查认证状态
    document.addEventListener('DOMContentLoaded', async () => {
      // 移动端检测 - 如果是移动端则跳转到首页
      if (isMobileDevice()) {
        console.log('检测到移动端访问，跳转到首页');
        window.location.href = '/';
        return;
      }

      const isAuthenticated = await checkAuthentication();
      if (isAuthenticated) {
        // 认证成功，继续加载页面
        loadServers();
      }
    });

    // 监听窗口大小变化，如果调整到移动端尺寸则跳转到首页
    window.addEventListener('resize', () => {
      if (isMobileDevice()) {
        console.log('窗口调整到移动端尺寸，跳转到首页');
        window.location.href = '/';
      }
    });
  </script>
  
  </div> <!-- page-wrapper -->
</body>
</html> 